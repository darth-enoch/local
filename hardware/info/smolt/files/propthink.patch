--- smolt-1.4.2.2-orig/client/smolt.py	2010-03-19 16:08:22.000000000 +0200
+++ smolt-1.4.2.2/client/smolt.py	2013-01-12 17:49:30.000000000 +0200
@@ -32,18 +32,21 @@
 
 from i18n import _
 
-import dbus
+#import dbus
+import platform
 import software
-import os
+import commands
 import urlgrabber.grabber
 import sys
+import os
 from urlparse import urljoin
 from urlparse import urlparse
 from urllib import urlencode
 import urllib
 import simplejson
-from simplejson import JSONEncoder
+from simplejson import JSONEncoder, JSONDecodeError
 import datetime
+import logging
 
 import config
 from smolt_config import get_config_attr
@@ -51,13 +54,23 @@
 
 from gate import Gate
 from uuiddb import UuidDb
+import logging
+from logging.handlers import RotatingFileHandler
 import codecs
+import urllib2
+
+try:
+    import subprocess
+except ImportError, e:
+    pass
+
 
 WITHHELD_MAGIC_STRING = 'WITHHELD'
 SELINUX_ENABLED = 1
 SELINUX_DISABLED = 0
 SELINUX_WITHHELD = -1
 
+
 fs_types = get_config_attr("FS_TYPES", ["ext2", "ext3", "xfs", "reiserfs"])
 fs_mounts = dict.fromkeys(get_config_attr("FS_MOUNTS", ["/", "/home", "/etc", "/var", "/boot"]), True)
 fs_m_filter = get_config_attr("FS_M_FILTER", False)
@@ -72,10 +85,12 @@
 smoltProtocol = '0.97'
 supported_protocols = ['0.97',]
 user_agent = 'smolt/%s' % smoltProtocol
-timeout = 60.0
+timeout = 120.0
 proxies = None
 DEBUG = False
 
+
+
 PCI_BASE_CLASS_STORAGE =        1
 PCI_CLASS_STORAGE_SCSI =        0
 PCI_CLASS_STORAGE_IDE =         1
@@ -141,6 +156,38 @@
 PCI_CLASS_SERIAL_FIBER =        4
 PCI_CLASS_SERIAL_SMBUS =        5
 
+
+# Taken from the DMI spec
+FORMFACTOR_LIST = [ "Unknown",
+                "Other",
+                "Unknown",
+                "Desktop",
+                "Low Profile Desktop",
+                "Pizza Box",
+                "Mini Tower",
+                "Tower",
+                "Portable",
+                "Laptop",
+                "Notebook",
+                "Hand Held",
+                "Docking Station",
+                "All In One",
+                "Sub Notebook",
+                "Space-saving",
+                "Lunch Box",
+                "Main Server Chassis",
+                "Expansion Chassis",
+                "Sub Chassis",
+                "Bus Expansion Chassis",
+                "Peripheral Chassis",
+                "RAID Chassis",
+                "Rack Mount Chassis",
+                "Sealed-case PC",
+                "Multi-system",
+                "CompactPCI",
+                "AdvancedTCA"
+    ]
+
 def to_ascii(o, current_encoding='utf-8'):
     if not isinstance(o, basestring):
         return o
@@ -149,7 +196,7 @@
         s = o
     else:
         s = unicode(o, current_encoding)
-    return codecs.encode(s, 'ascii', 'ignore')
+    return s
 
 class Device:
     def __init__(self, props, hardware):
@@ -182,7 +229,10 @@
         try:
             self.bus = props['linux.subsystem'].strip()
         except KeyError:
-            self.bus = 'Unknown'
+            try:
+                self.bus = props['info.bus'].strip()
+            except KeyError:
+                self.bus = 'Unknown'
         try:
             self.vendorid = props['%s.vendor_id' % self.bus]
         except KeyError:
@@ -202,10 +252,13 @@
         try:
             self.driver = props['info.linux.driver'].strip()
         except KeyError:
-            self.driver = 'Unknown'
+            try:
+                self.driver = props['net.linux.driver'].strip()
+            except KeyError:
+                self.driver = 'Unknown'
 
 class Host:
-    def __init__(self, hostInfo):
+    def __init__(self):
         cpuInfo = read_cpuinfo()
         memory = read_memory()
         self.UUID = getUUID()
@@ -228,39 +281,25 @@
             try:
                 self.language = os.environ['LANG']
             except KeyError:
-                self.language = 'Unknown'
+                try:
+                    status, lang = commands.getstatusoutput("grep LANG /etc/sysconfig/i18n")
+                    if status == 0:
+                        self.language = lang.split('"')[1]
+                    else:
+                        self.language = 'Unknown'
+                except:
+                    self.language = 'Unknown'
         else:
             self.language = WITHHELD_MAGIC_STRING
 
-        try:
-            tempform = hostInfo['system.kernel.machine']
-        except KeyError:
-            tempform = 'Unknown'
+        tempform = platform.machine()
         self.platform = Gate().process('arch', tempform, WITHHELD_MAGIC_STRING)
 
-        if Gate().grants('vendor'):
-            self.systemVendor = hostInfo.get('system.vendor')
-            if not self.systemVendor:
-                self.systemVendor = hostInfo.get('system.hardware.vendor')
-            if not self.systemVendor:
-                self.systemVendor = 'Unknown'
-        else:
-            self.systemVendor = WITHHELD_MAGIC_STRING
-
-        if Gate().grants('model'):
-            self.systemModel = hostInfo.get('system.product')
-            if not self.systemModel:
-                self.systemModel = hostInfo.get('system.hardware.product')
-                if hostInfo.get('system.hardware.version'):
-                    self.systemModel += ' ' + hostInfo.get('system.hardware.version')
-            if not self.systemModel:
-                self.systemModel = 'Unknown'
-        else:
-            self.systemModel = WITHHELD_MAGIC_STRING
 
         if Gate().grants('form_factor'):
             try:
-                self.formfactor = hostInfo['system.formfactor']
+                formfactor_id = int(cat('/sys/devices/virtual/dmi/id/chassis_type')[0].strip())
+                self.formfactor = FORMFACTOR_LIST[formfactor_id]
             except:
                 self.formfactor = 'Unknown'
         else:
@@ -324,6 +363,8 @@
             self.selinux_enforce = WITHHELD_MAGIC_STRING
 
 
+
+
 def get_file_systems():
     if not Gate().grants('file_systems'):
         return []
@@ -347,15 +388,21 @@
 
 def ignoreDevice(device):
     ignore = 1
-    if device.bus == 'Unknown':
+    if device.bus == 'Unknown' or device.bus == 'unknown':
         return 1
-    if device.bus == 'usb' and device.type == None:
+    if device.vendorid in (0, None) and device.type == None:
         return 1
     if device.bus == 'usb' and device.driver == 'hub':
         return 1
+    if device.bus == 'usb' and 'Hub' in device.description:
+        return 1
     if device.bus == 'sound' and device.driver == 'Unknown':
         return 1
-    if device.bus == 'pnp' and (device.driver == 'Unknown' or device.driver == 'system'):
+    if device.bus == 'pnp' and device.driver in ('Unknown', 'system'):
+        return 1
+    if device.bus == 'block' and device.type == 'DISK':
+        return 1
+    if device.bus == 'usb_device' and device.type == None:
         return 1
     return 0
 
@@ -370,10 +417,10 @@
         if 'UUID:' in line:
             return line.strip()[6:]
         if 'ServerMessage:' in line:
-            print _('Server Message: "%s"') % line.split('ServerMessage: ')[1]
             if 'Critical' in line:
-                raise ServerError, _('Could not contact server: %s') % line.split('ServerMessage: ')[1]
-
+                raise ServerError, line.split('ServerMessage: ')[1]
+            else:
+                print _('Server Message: "%s"') % line.split('ServerMessage: ')[1]
 
 def error(message):
     print >> sys.stderr, message
@@ -385,14 +432,19 @@
 def reset_resolver():
     '''Attempt to reset the system hostname resolver.
     returns 0 on success, or -1 if an error occurs.'''
-    import ctypes
     try:
-        resolv = ctypes.CDLL("libresolv.so.2")
-        r = resolv.__res_init()
-    except (OSError, AttributeError):
-        print "Warning: could not find __res_init in libresolv.so.2"
-        r = -1
-    return r
+        import ctypes
+        try:
+            resolv = ctypes.CDLL("libresolv.so.2")
+            r = resolv.__res_init()
+        except (OSError, AttributeError):
+            print "Warning: could not find __res_init in libresolv.so.2"
+            r = -1
+        return r
+    except ImportError:
+        # If ctypes isn't supported (older versions of python for example)
+        # Then just don't do anything
+        pass
 
 class SystemBusError(Exception):
     def __init__(self, message, hint = None):
@@ -419,44 +471,101 @@
 class _Hardware:
     devices = {}
     def __init__(self):
-        try:
-            systemBus = dbus.SystemBus()
-        except:
-            raise SystemBusError, _('Could not bind to dbus.  Is dbus running?')
-
-        try:
-            mgr = self.dbus_get_interface(systemBus, 'org.freedesktop.Hal', '/org/freedesktop/Hal/Manager', 'org.freedesktop.Hal.Manager')
-            all_dev_lst = mgr.GetAllDevices()
-        except:
-            raise SystemBusError, _('Could not connect to hal, is it running?\nRun "service haldaemon start" as root')
-
-        self.systemBus = systemBus
-        for udi in all_dev_lst:
-            props = self.get_properties_for_udi (udi)
-            if Gate().grants('devices'):
-                self.devices[udi] = Device(props, self)
-            if udi == '/org/freedesktop/Hal/devices/computer':
-                self.host = Host(props)
+#        try:
+#            systemBus = dbus.SystemBus()
+#        except:
+#            raise SystemBusError, _('Could not bind to dbus.  Is dbus running?')
+#
+#        try:
+#            mgr = self.dbus_get_interface(systemBus, 'org.freedesktop.Hal', '/org/freedesktop/Hal/Manager', 'org.freedesktop.Hal.Manager')
+#            all_dev_lst = mgr.GetAllDevices()
+#        except:
+#            raise SystemBusError, _('Could not connect to hal, is it running?\nRun "service haldaemon start" as root')
+#
+#        self.systemBus = systemBus
+
+        if Gate().grants('devices'):
+#        for udi in all_dev_lst:
+#            props = self.get_properties_for_udi (udi)
+#            if udi == '/org/freedesktop/Hal/devices/computer':
+#                try:
+#                    vendor = props['system.vendor']
+#                    if len(vendor.strip()) == 0:
+#                        vendor = None
+#                except KeyError:
+#                    try:
+#                        vendor = props['vendor']
+#                        if len(vendor.strip()) == 0:
+#                            vendor = None
+#                    except KeyError:
+#                        vendor = None
+#                try:
+#                    product = props['system.product']
+#                    if len(product.strip()) == 0:
+#                        product = None
+#                except KeyError:
+#                    try:
+#                        product = props['product']
+#                        if len(product.strip()) == 0:
+#                            product = None
+#                    except KeyError:
+#                        product = None
+#
+#                # This could be done with python-dmidecode but it would pull
+#                # In an extra dep on smolt.  It may not be worth it
+#                if vendor is None or product is None:
+#                    try:
+#                        dmiOutput = subprocess.Popen('/usr/sbin/dmidecode r 2> /dev/null', shell=True, stdout=subprocess.PIPE).stdout
+#                    except NameError:
+#                        i, dmiOutput, e = os.popen('/usr/sbin/dmidecode', 'r')
+#                    section = None
+#                    sysvendor = None
+#                    sysproduct = None
+#                    boardvendor = None
+#                    boardproduct = None
+#                    for line in dmiOutput:
+#                        line = line.strip()
+#                        if "Information" in line:
+#                            section = line
+#                        elif section is None:
+#                            continue
+#                        elif line.startswith("Manufacturer: ") and section.startswith("System"):
+#                            sysvendor = line.split("Manufacturer: ", 1)[1]
+#                        elif line.startswith("Product Name: ") and section.startswith("System"):
+#                            sysproduct = line.split("Product Name: ", 1)[1]
+#                        elif line.startswith("Manufacturer: ") and section.startswith("Base Board"):
+#                            boardvendor = line.split("Manufacturer: ", 1)[1]
+#                        elif line.startswith("Product Name: ") and section.startswith("Base Board"):
+#                            boardproduct = line.split("Product Name: ", 1)[1]
+#                    status = dmiOutput.close()
+#                    if status is None:
+#                        if sysvendor not in (None, 'System Manufacturer') and sysproduct not in (None, 'System Name'):
+#                            props['system.vendor'] = sysvendor
+#                            props['system.product'] = sysproduct
+#                        elif boardproduct is not None and boardproduct is not None:
+#                            props['system.vendor'] = boardvendor
+#                            props['system.product'] = boardproduct
+                self.host = Host()
 
         self.fss = get_file_systems()
 
-    def get_properties_for_udi (self, udi):
-        dev = self.dbus_get_interface(self.systemBus, 'org.freedesktop.Hal',
-                                      udi, 'org.freedesktop.Hal.Device')
-        return dev.GetAllProperties()
-
-    def dbus_get_interface(self, bus, service, object, interface):
-        iface = None
-        # dbus-python bindings as of version 0.40.0 use new api
-        if getattr(dbus, 'version', (0,0,0)) >= (0,40,0):
-            # newer api: get_object(), dbus.Interface()
-            proxy = bus.get_object(service, object)
-            iface = dbus.Interface(proxy, interface)
-        else:
-            # deprecated api: get_service(), get_object()
-            svc = bus.get_service(service)
-            iface = svc.get_object(object, interface)
-        return iface
+#    def get_properties_for_udi (self, udi):
+#        dev = self.dbus_get_interface(self.systemBus, 'org.freedesktop.Hal',
+#                                      udi, 'org.freedesktop.Hal.Device')
+#        return dev.GetAllProperties()
+
+#    def dbus_get_interface(self, bus, service, object, interface):
+#        iface = None
+#        # dbus-python bindings as of version 0.40.0 use new api
+#        if getattr(dbus, 'version', (0,0,0)) >= (0,40,0):
+#            # newer api: get_object(), dbus.Interface()
+#            proxy = bus.get_object(service, object)
+#            iface = dbus.Interface(proxy, interface)
+#        else:
+#            # deprecated api: get_service(), get_object()
+#            svc = bus.get_service(service)
+#            iface = svc.get_object(object, interface)
+#        return iface
 
     def get_sendable_devices(self, protocol_version=smoltProtocol):
         my_devices = []
@@ -507,30 +616,55 @@
                 'formfactor' :      self.host.formfactor,
                 'selinux_enabled':  self.host.selinux_enabled,
                 'selinux_policy':   self.host.selinux_policy,
-                'selinux_enforce':  self.host.selinux_enforce}
+                'selinux_enforce':  self.host.selinux_enforce
+                }
 
     def get_sendable_fss(self, protocol_version=smoltProtocol):
         return [fs.to_dict() for fs in self.fss]
 
     def write_pub_uuid(self,smoonURL,pub_uuid):
         smoonURLparsed=urlparse(smoonURL)
+        if pub_uuid is None:
+            return
+
         try:
-            UuidDb().set_pub_uuid(getUUID(), smoonURLparsed.hostname, pub_uuid)
+            UuidDb().set_pub_uuid(getUUID(), smoonURLparsed[1], pub_uuid)
         except Exception, e:
             sys.stderr.write(_('\tYour pub_uuid could not be written.\n\n'))
         return
 
     def write_admin_token(self,smoonURL,admin,admin_token_file):
         smoonURLparsed=urlparse(smoonURL)
-        admin_token_file += ("-"+smoonURLparsed.hostname)
+        admin_token_file += ("-"+smoonURLparsed[1])
         try:
             file(admin_token_file, 'w').write(admin)
         except Exception, e:
             sys.stderr.write(_('\tYour admin token  could not be cached: %s\n' % e))
         return
 
+    def get_submission_data(self, prefered_protocol=None):
+        send_host_obj = self.get_sendable_host(prefered_protocol)
+        send_host_obj['devices'] = self.get_sendable_devices(prefered_protocol)
+        send_host_obj['fss'] = self.get_sendable_fss(prefered_protocol)
+        send_host_obj['smolt_protocol'] = prefered_protocol
+
+        dist_data_dict = {}
+        for k, v in self.distro_specific.items():
+            dist_data_dict[k] = v['data']
+        send_host_obj['distro_specific'] = dist_data_dict
+
+        return send_host_obj
 
-    def send(self, user_agent=user_agent, smoonURL=smoonURL, timeout=timeout, proxies=proxies):
+    def get_distro_specific_html(self):
+        lines = []
+        if not self.distro_specific:
+            lines.append(_('No distribution-specific data yet'))
+        else:
+            for k, v in self.distro_specific.items():
+                lines.append(v['html'])
+        return '\n'.join(lines)
+
+    def send(self, user_agent=user_agent, smoonURL=smoonURL, timeout=timeout, proxies=proxies, batch=False):
         def serialize(object, human=False):
             if human:
                 indent = 2
@@ -564,41 +698,74 @@
         finally:
             token.close()
 
-        send_host_obj = self.get_sendable_host(prefered_protocol)
-        my_devices = self.get_sendable_devices(prefered_protocol)
-        my_fss = self.get_sendable_fss(prefered_protocol)
+        send_host_obj = self.get_submission_data(prefered_protocol)
 
-        send_host_obj['devices'] = my_devices
-        send_host_obj['fss'] = my_fss
-        send_host_obj['smolt_protocol'] = prefered_protocol
 
         debug('smoon server URL: %s' % smoonURL)
 
         serialized_host_obj_machine = serialize(send_host_obj, human=False)
-        send_host_str = ('uuid=%s&host=' + \
-                         serialized_host_obj_machine + \
-                         '&token=%s&smolt_protocol=%s') % \
-                         (self.host.UUID, tok, smoltProtocol)
+
+        # Log-dump submission data
+        log_matrix = {
+            '.json':serialize(send_host_obj, human=True),
+            '-distro.html':self.get_distro_specific_html(),
+            '.rst':'\n'.join(map(to_ascii, self.getProfile())),
+        }
+        logdir = os.path.expanduser('~/.smolt/')
+        try:
+            if not os.path.exists(logdir):
+                os.mkdir(logdir, 1700)
+
+            for k, v in log_matrix.items():
+                filename = os.path.expanduser(os.path.join(
+                        logdir, 'submission%s' % k))
+                r = RotatingFileHandler(filename, \
+                        maxBytes=1000000, backupCount=9)
+                r.stream.write(v)
+                r.doRollover()
+                r.close()
+                os.remove(filename)
+        except:
+            pass
+        del logdir
+        del log_matrix
+
 
         debug('sendHostStr: %s' % serialized_host_obj_machine)
         debug('Sending Host')
 
-        try:
-            o = grabber.urlopen(urljoin(smoonURL + "/", "/client/add_json", False), data=send_host_str,
-                                http_headers=(
-                            ('Content-length', '%i' % len(send_host_str)),
-                            ('Content-type', 'application/x-www-form-urlencoded')))
-        except urlgrabber.grabber.URLGrabError, e:
+        if batch:
+            entry_point = "/client/batch_add_json"
+            logging.debug('Submitting in asynchronous mode')
+        else:
+            entry_point = "/client/add_json"
+            logging.debug('Submitting in synchronous mode')
+        request_url = urljoin(smoonURL + "/", entry_point, False)
+        logging.debug('Sending request to %s' % request_url)
+        try:
+            opener = urllib2.build_opener(MultipartPostHandler.MultipartPostHandler)
+            params = {  'uuid':self.host.UUID,
+                        'host':serialized_host_obj_machine,
+                        'token':tok,
+                        'smolt_protocol':smoltProtocol}
+            o = opener.open(request_url, params)
+
+        except Exception, e:
             error(_('Error contacting Server: %s') % e)
             return (1, None, None)
         else:
             try:
-                pub_uuid = serverMessage(o.read())
+                server_response = serverMessage(o.read())
             except ServerError, e:
                 error(_('Error contacting server: %s') % e)
                 return (1, None, None)
+
             o.close()
-            self.write_pub_uuid(smoonURL,pub_uuid)
+            if batch:
+                pub_uuid = None
+            else:
+                pub_uuid = server_response
+            self.write_pub_uuid(smoonURL, pub_uuid)
 
             try:
                 admin_token = grabber.urlopen(urljoin(smoonURL + "/", '/tokens/admin_token_json?uuid=%s' % self.host.UUID, False))
@@ -623,11 +790,21 @@
         try:
             new_uuid = grabber.urlopen(urljoin(smoonURL + "/", '/client/regenerate_pub_uuid?uuid=%s' % self.host.UUID))
         except urlgrabber.grabber.URLGrabError, e:
-            error(_('Error contacting Server: %s') % e)
-            sys.exit(0)
-        pub_uuid = simplejson.loads(new_uuid.read())['pub_uuid']
-        self.write_pub_uuid(smoonURL,pub_uuid)
-        return pub_uuid
+            raise ServerError, str(e)
+
+        response = new_uuid.read()  # Either JSON or an error page in (X)HTML
+        try:
+            response_dict = simplejson.loads(response)
+        except JSONDecodeError, e:
+            serverMessage(response)
+            raise ServerError, _('Reply from server could not be interpreted')
+        else:
+            try:
+                pub_uuid = response_dict['pub_uuid']
+            except KeyError:
+                raise ServerError, _('Reply from server could not be interpreted')
+            self.write_pub_uuid(smoonURL,pub_uuid)
+            return pub_uuid
 
 
     def get_general_info_excerpt(self):
@@ -637,7 +814,7 @@
             _('Language'):self.host.language,
         }
         lines = []
-        for k, v in sorted(d.items()):
+        for k, v in d.items():
             lines.append('%s: %s' % (k, v))
         lines.append('...')
         return '\n'.join(lines)
@@ -664,6 +841,8 @@
         return '\n'.join(lines)
 
     def get_distro_info_excerpt(self):
+        for k, v in self.distro_specific.items():
+            return v['rst_excerpt']
         return "No data, yet"
 
     def getProfile(self):
@@ -706,6 +885,11 @@
             for fs in self.fss:
                 printBuffer.append(str(fs))
 
+            for k, v in self.distro_specific.items():
+                printBuffer.append('')
+                printBuffer.append('')
+                printBuffer.append(v['rst'])
+
             printBuffer.append('')
         return printBuffer
 
@@ -727,8 +911,6 @@
         yield _('CPU Speed'), self.host.cpuSpeed
         yield _('System Memory'), self.host.systemMemory
         yield _('System Swap'), self.host.systemSwap
-        yield _('Vendor'), self.host.systemVendor
-        yield _('System'), self.host.systemModel
         yield _('Form factor'), self.host.formfactor
         yield _('Kernel'), self.host.kernelVersion
         yield _('SELinux Enabled'), self.host.selinux_enabled
@@ -738,21 +920,17 @@
     def deviceIter(self):
         '''Iterate over our devices.'''
         for device in self.devices:
-            try:
-                Bus = self.devices[device].bus
-                VendorID = self.devices[device].vendorid
-                DeviceID = self.devices[device].deviceid
-                SubsysVendorID = self.devices[device].subsysvendorid
-                SubsysDeviceID = self.devices[device].subsysdeviceid
-                Driver = self.devices[device].driver
-                Type = self.devices[device].type
-                Description = self.devices[device].description
-                Description = Description.decode('latin1')
-            except:
-                continue
-            else:
-                if not ignoreDevice(self.devices[device]):
-                    yield VendorID, DeviceID, SubsysVendorID, SubsysDeviceID, Bus, Driver, Type, Description
+            Bus = self.devices[device].bus
+            VendorID = self.devices[device].vendorid
+            DeviceID = self.devices[device].deviceid
+            SubsysVendorID = self.devices[device].subsysvendorid
+            SubsysDeviceID = self.devices[device].subsysdeviceid
+            Driver = self.devices[device].driver
+            Type = self.devices[device].type
+            Description = self.devices[device].description
+            #Description = Description.decode('latin1')
+            if not ignoreDevice(self.devices[device]):
+                yield VendorID, DeviceID, SubsysVendorID, SubsysDeviceID, Bus, Driver, Type, Description
 
 
 _hardware_instance = None
@@ -761,6 +939,8 @@
     global _hardware_instance
     if _hardware_instance == None:
         _hardware_instance = _Hardware()
+        #if enabled then insert the myth specific items into hardware
+
     return _hardware_instance
 
 
@@ -833,18 +1013,7 @@
             return 'SOCKET'
 
     if node.has_key('storage.drive_type'):
-        #CDROM
-        if node['storage.drive_type'] == 'cdrom':
-            return 'CDROM'
-        #HD
-        if node['storage.drive_type'] == 'disk':
-            return 'HD'
-         #FLOPPY
-        if node['storage.drive_type'] == 'floppy':
-            return 'FLOPPY'
-        #TAPE
-        if node['storage.drive_type'] == 'tape':
-            return 'TAPE'
+        return node['storage.drive_type'].upper()
 
     #PRINTER
     if node.has_key('printer.product'):
@@ -1112,10 +1281,9 @@
 def read_memory():
     un = os.uname()
     kernel = un[2]
-    if kernel[:3] == "2.6":
-        return read_memory_2_6()
     if kernel[:3] == "2.4":
         return read_memory_2_4()
+    return read_memory_2_6()
 
 def read_memory_2_4():
     if not os.access("/proc/meminfo", os.R_OK):
@@ -1211,7 +1379,7 @@
 
 def getPubUUID(user_agent=user_agent, smoonURL=smoonURL, timeout=timeout):
 	smoonURLparsed=urlparse(smoonURL)
-	res = UuidDb().get_pub_uuid(getUUID(), smoonURLparsed.hostname)
+	res = UuidDb().get_pub_uuid(getUUID(), smoonURLparsed[1])
 	if res:
 		return res
 
@@ -1220,7 +1388,7 @@
 		o = grabber.urlopen(urljoin(smoonURL + "/", '/client/pub_uuid/%s' % getUUID()))
 		pudict = simplejson.loads(o.read())
 		o.close()
-		UuidDb().set_pub_uuid(getUUID(), smoonURLparsed.hostname, pudict["pub_uuid"])
+		UuidDb().set_pub_uuid(getUUID(), smoonURLparsed[1], pudict["pub_uuid"])
 		return pudict["pub_uuid"]
 	except Exception, e:
 		error(_('Error determining public UUID: %s') % e)

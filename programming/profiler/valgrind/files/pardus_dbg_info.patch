Index: valgrind-3.6.1/coregrind/m_redir.c
===================================================================
--- valgrind-3.6.1.orig/coregrind/m_redir.c
+++ valgrind-3.6.1/coregrind/m_redir.c
@@ -7,7 +7,7 @@
    This file is part of Valgrind, a dynamic binary instrumentation
    framework.
 
-   Copyright (C) 2000-2010 Julian Seward 
+   Copyright (C) 2000-2010 Julian Seward
       jseward@acm.org
    Copyright (C) 2003-2010 Jeremy Fitzhardinge
       jeremy@goop.org
@@ -178,7 +178,7 @@
      DebugInfo to find new specs.  Each of these needs to be compared
      against all symbols in all the existing DebugInfos to generate
      new actives.
-     
+
    - (existing Specs x new DebugInfo): scan all symbols in the
      DebugInfo, trying to match them to any existing specs, also
      generating new actives.
@@ -209,7 +209,7 @@
 
 /* A specification of a redirection we want to do.  Note that because
    both the "from" soname and function name may contain wildcards, the
-   spec can match an arbitrary number of times. 
+   spec can match an arbitrary number of times.
 
    16 Nov 2007: Comments re .mandatory field: The initial motivation
    for this is making Memcheck work sanely on glibc-2.6.X ppc32-linux.
@@ -296,7 +296,7 @@ static Bool   is_aix5_glink_idiom(Addr);
 static void   show_redir_state ( HChar* who );
 static void   show_active ( HChar* left, Active* act );
 
-static void   handle_maybe_load_notifier( const UChar* soname, 
+static void   handle_maybe_load_notifier( const UChar* soname,
                                                 HChar* symbol, Addr addr );
 
 static void   handle_require_text_symbols ( DebugInfo* );
@@ -305,14 +305,14 @@ static void   handle_require_text_symbol
 /*--- NOTIFICATIONS                                        ---*/
 /*------------------------------------------------------------*/
 
-static 
-void generate_and_add_actives ( 
+static
+void generate_and_add_actives (
         /* spec list and the owning TopSpec */
-        Spec*    specs, 
+        Spec*    specs,
         TopSpec* parent_spec,
 	/* debuginfo and the owning TopSpec */
         DebugInfo* di,
-        TopSpec* parent_sym 
+        TopSpec* parent_sym
      );
 
 /* Notify m_redir of the arrival of a new DebugInfo.  This is fairly
@@ -368,7 +368,7 @@ void VG_(redir_notify_new_DebugInfo)( De
          /* It's not a full-scale redirect, but perhaps it is a load-notify
             fn?  Let the load-notify department see it. */
          handle_maybe_load_notifier( newsi_soname, sym_name, sym_addr );
-         continue; 
+         continue;
       }
       if (check_ppcTOCs && sym_toc == 0) {
          /* This platform uses toc pointers, but none could be found
@@ -398,7 +398,7 @@ void VG_(redir_notify_new_DebugInfo)( De
          VG_(DebugInfo_syms_getidx)( newsi, i, &sym_addr, &sym_toc,
                                      NULL, &sym_name, &isText, NULL );
          ok = isText
-              && VG_(maybe_Z_demangle)( 
+              && VG_(maybe_Z_demangle)(
                     sym_name, demangled_sopatt, N_DEMANGLED,
                     demangled_fnpatt, N_DEMANGLED, &isWrap );
          if (!ok)
@@ -408,7 +408,7 @@ void VG_(redir_notify_new_DebugInfo)( De
             /* has a valid toc pointer.  Ignore. */
             continue;
 
-         for (spec = specList; spec; spec = spec->next) 
+         for (spec = specList; spec; spec = spec->next)
             if (0 == VG_(strcmp)(spec->from_sopatt, demangled_sopatt)
                 && 0 == VG_(strcmp)(spec->from_fnpatt, demangled_fnpatt))
                break;
@@ -459,12 +459,12 @@ void VG_(redir_notify_new_DebugInfo)( De
 
    /* Case (2) */
    for (ts = topSpecs; ts; ts = ts->next) {
-      generate_and_add_actives( ts->specs, ts, 
+      generate_and_add_actives( ts->specs, ts,
                                 newsi,     newts );
    }
 
    /* Case (3) */
-   generate_and_add_actives( specList, newts, 
+   generate_and_add_actives( specList, newts,
                              newsi,    newts );
 
    /* Finally, add the new TopSpec. */
@@ -512,14 +512,14 @@ void VG_(redir_add_ifunc_target)( Addr o
    all the symbols in the given seginfo.  If a conflicting binding
    would thereby arise, don't add it, but do complain. */
 
-static 
-void generate_and_add_actives ( 
+static
+void generate_and_add_actives (
         /* spec list and the owning TopSpec */
-        Spec*    specs, 
+        Spec*    specs,
         TopSpec* parent_spec,
 	/* seginfo and the owning TopSpec */
         DebugInfo* di,
-        TopSpec* parent_sym 
+        TopSpec* parent_sym
      )
 {
    Spec*  sp;
@@ -535,7 +535,7 @@ void generate_and_add_actives (
    anyMark = False;
    for (sp = specs; sp; sp = sp->next) {
       sp->done = False;
-      sp->mark = VG_(string_match)( sp->from_sopatt, 
+      sp->mark = VG_(string_match)( sp->from_sopatt,
                                     VG_(DebugInfo_get_soname)(di) );
       anyMark = anyMark || sp->mark;
    }
@@ -853,7 +853,7 @@ static void add_hardwired_active ( Addr
    entry that holds these initial specs. */
 
 __attribute__((unused)) /* not used on all platforms */
-static void add_hardwired_spec ( HChar* sopatt, HChar* fnpatt, 
+static void add_hardwired_spec ( HChar* sopatt, HChar* fnpatt,
                                  Addr   to_addr,
                                  const HChar** mandatory )
 {
@@ -896,6 +896,7 @@ static const HChar* complain_about_strip
     "",
     "  On Debian, Ubuntu:                 libc6-dbg",
     "  On SuSE, openSuSE, Fedora, RHEL:   glibc-debuginfo",
+    "  On Pardus:                         glibc-dbginfo",
     NULL
   };
 
@@ -915,10 +916,10 @@ void VG_(redir_initialise) ( void )
    activeSet = VG_(OSetGen_Create)(offsetof(Active, from_addr),
                                    NULL,     // Use fast comparison
                                    dinfo_zalloc,
-                                   "redir.ri.1", 
+                                   "redir.ri.1",
                                    dinfo_free);
 
-   // The rest of this function just adds initial Specs.   
+   // The rest of this function just adds initial Specs.
 
 #  if defined(VGP_x86_linux)
    /* If we're using memcheck, use this intercept right from the
@@ -947,11 +948,11 @@ void VG_(redir_initialise) ( void )
    /* Redirect vsyscalls to local versions */
    add_hardwired_active(
       0xFFFFFFFFFF600000ULL,
-      (Addr)&VG_(amd64_linux_REDIR_FOR_vgettimeofday) 
+      (Addr)&VG_(amd64_linux_REDIR_FOR_vgettimeofday)
    );
-   add_hardwired_active( 
+   add_hardwired_active(
       0xFFFFFFFFFF600400ULL,
-      (Addr)&VG_(amd64_linux_REDIR_FOR_vtime) 
+      (Addr)&VG_(amd64_linux_REDIR_FOR_vtime)
    );
 
    /* If we're using memcheck, use these intercepts right from
@@ -970,7 +971,7 @@ void VG_(redir_initialise) ( void )
             continue without it */
          complain_about_stripped_glibc_ldso
 #        endif
-      );   
+      );
    }
 
 #  elif defined(VGP_ppc32_linux)
@@ -983,7 +984,7 @@ void VG_(redir_initialise) ( void )
          "ld.so.1", "strlen",
          (Addr)&VG_(ppc32_linux_REDIR_FOR_strlen),
          complain_about_stripped_glibc_ldso
-      );   
+      );
       add_hardwired_spec(
          "ld.so.1", "strcmp",
          (Addr)&VG_(ppc32_linux_REDIR_FOR_strcmp),
@@ -1030,7 +1031,7 @@ void VG_(redir_initialise) ( void )
       //add_hardwired_spec(
       //   "ld-linux.so.3", "index",
       //   (Addr)&VG_(arm_linux_REDIR_FOR_index),
-      //   NULL 
+      //   NULL
       //);
       add_hardwired_spec(
          "ld-linux.so.3", "memcpy",
@@ -1165,8 +1166,8 @@ static Bool is_aix5_glink_idiom ( Addr s
 /*--- NOTIFY-ON-LOAD FUNCTIONS                             ---*/
 /*------------------------------------------------------------*/
 
-static 
-void handle_maybe_load_notifier( const UChar* soname, 
+static
+void handle_maybe_load_notifier( const UChar* soname,
                                        HChar* symbol, Addr addr )
 {
 #  if defined(VGP_x86_linux)
@@ -1174,7 +1175,7 @@ void handle_maybe_load_notifier( const U
       See comment on declaration of VG_(client__dl_sysinfo_int80) for
       the reason.  As far as I can tell, the relevant symbol is always
       in object with soname "ld-linux.so.2". */
-   if (symbol && symbol[0] == '_' 
+   if (symbol && symbol[0] == '_'
               && 0 == VG_(strcmp)(symbol, "_dl_sysinfo_int80")
               && 0 == VG_(strcmp)(soname, "ld-linux.so.2")) {
       if (VG_(client__dl_sysinfo_int80) == 0)
@@ -1184,7 +1185,7 @@ void handle_maybe_load_notifier( const U
 
    /* Normal load-notifier handling after here.  First, ignore all
       symbols lacking the right prefix. */
-   if (0 != VG_(strncmp)(symbol, VG_NOTIFY_ON_LOAD_PREFIX, 
+   if (0 != VG_(strncmp)(symbol, VG_NOTIFY_ON_LOAD_PREFIX,
                                  VG_NOTIFY_ON_LOAD_PREFIX_LEN))
       /* Doesn't have the right prefix */
       return;
@@ -1312,7 +1313,7 @@ static void handle_require_text_symbols
 
 static void show_spec ( HChar* left, Spec* spec )
 {
-   VG_(message)( Vg_DebugMsg, 
+   VG_(message)( Vg_DebugMsg,
                  "%s%25s %30s %s-> 0x%08llx\n",
                  left,
                  spec->from_sopatt, spec->from_fnpatt,
@@ -1331,8 +1332,8 @@ static void show_active ( HChar* left, A
    ok = VG_(get_fnname_w_offset)(act->to_addr, name2, 64);
    if (!ok) VG_(strcpy)(name2, "???");
 
-   VG_(message)(Vg_DebugMsg, "%s0x%08llx (%20s) %s-> 0x%08llx %s\n", 
-                             left, 
+   VG_(message)(Vg_DebugMsg, "%s0x%08llx (%20s) %s-> 0x%08llx %s\n",
+                             left,
                              (ULong)act->from_addr, name1,
                              act->isWrap ? "W" : "R",
                              (ULong)act->to_addr, name2 );
@@ -1346,7 +1347,7 @@ static void show_redir_state ( HChar* wh
    VG_(message)(Vg_DebugMsg, "<<\n");
    VG_(message)(Vg_DebugMsg, "   ------ REDIR STATE %s ------\n", who);
    for (ts = topSpecs; ts; ts = ts->next) {
-      VG_(message)(Vg_DebugMsg, 
+      VG_(message)(Vg_DebugMsg,
                    "   TOPSPECS of soname %s\n",
                    ts->seginfo
                       ? (HChar*)VG_(DebugInfo_get_soname)(ts->seginfo)

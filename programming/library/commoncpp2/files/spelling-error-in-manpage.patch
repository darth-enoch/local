Description: spelling-error-in-manpage

Index: libcommoncpp2-1.8.1/inc/cc++/address.h
===================================================================
--- libcommoncpp2-1.8.1.orig/inc/cc++/address.h	2010-11-01 09:22:45.000000000 +1100
+++ libcommoncpp2-1.8.1/inc/cc++/address.h	2012-06-23 15:59:12.000000000 +1000
@@ -510,7 +510,7 @@
 /**
  * Internet addresses used specifically as masking addresses (such as "
  * 255.255.255.0") are held in the IPV4Mask derived object.  The
- * seperate class is used so that C++ type casting can automatically
+ * separate class is used so that C++ type casting can automatically
  * determine when an IPV4Address object is really a mask address object
  * rather than simply using the base class.  This also allows manipulative
  * operators for address masking to operate only when presented with a
@@ -904,7 +904,7 @@
 /**
  * Internet addresses used specifically as masking addresses (such as "
  * 255.255.255.0") are held in the IPV6Mask derived object.  The
- * seperate class is used so that C++ type casting can automatically
+ * separate class is used so that C++ type casting can automatically
  * determine when an IPV6Address object is really a mask address object
  * rather than simply using the base class.  This also allows manipulative
  * operators for address masking to operate only when presented with a
Index: libcommoncpp2-1.8.1/inc/cc++/file.h
===================================================================
--- libcommoncpp2-1.8.1.orig/inc/cc++/file.h	2010-11-01 09:32:15.000000000 +1100
+++ libcommoncpp2-1.8.1/inc/cc++/file.h	2012-06-23 15:59:51.000000000 +1000
@@ -757,7 +757,7 @@
 public:
     /**
      * Open a file for mapping.  More than one segment of a file
-     * may be mapped into seperate regions of memory.
+     * may be mapped into separate regions of memory.
      *
      * @param fname file name to access for mapping.
      * @param mode  access mode to map file.
Index: libcommoncpp2-1.8.1/inc/cc++/socket.h
===================================================================
--- libcommoncpp2-1.8.1.orig/inc/cc++/socket.h	2010-11-01 09:47:54.000000000 +1100
+++ libcommoncpp2-1.8.1/inc/cc++/socket.h	2012-06-23 16:00:13.000000000 +1000
@@ -1856,7 +1856,7 @@
 
 /**
  * The TCP session is used to primarily to represent a client connection
- * that can be managed on a seperate thread.  The TCP session also supports
+ * that can be managed on a separate thread.  The TCP session also supports
  * a non-blocking connection scheme which prevents blocking during the
  * constructor and moving the process of completing a connection into the
  * thread that executes for the session.
Index: libcommoncpp2-1.8.1/inc/cc++/socketport.h
===================================================================
--- libcommoncpp2-1.8.1.orig/inc/cc++/socketport.h	2010-11-01 09:48:20.000000000 +1100
+++ libcommoncpp2-1.8.1/inc/cc++/socketport.h	2012-06-23 16:00:03.000000000 +1000
@@ -278,7 +278,7 @@
  * attached socket ports.  Multiple pool objects may be created and
  * multiple socket ports may be attached to the same thread of execution.
  * This allows one to balance threads and sockets they service rather than
- * either using a single thread for all connections or a seperate thread
+ * either using a single thread for all connections or a separate thread
  * for each connection.  Features can be added through supported virtual
  * methods.
  *
Index: libcommoncpp2-1.8.1/inc/cc++/unix.h
===================================================================
--- libcommoncpp2-1.8.1.orig/inc/cc++/unix.h	2010-11-01 09:51:05.000000000 +1100
+++ libcommoncpp2-1.8.1/inc/cc++/unix.h	2012-06-23 15:58:46.000000000 +1000
@@ -325,7 +325,7 @@
 
  /**
   * The Unix domain session is used to primarily to represent a client connection
-  * that can be managed on a seperate thread.  The Unix domain session also supports
+  * that can be managed on a separate thread.  The Unix domain session also supports
   * a non-blocking connection scheme which prevents blocking during the
   * constructor and moving the process of completing a connection into the
   * thread that executes for the session.

diff --git a/ChangeLog b/ChangeLog
index 43d605a..18701cd 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,16 @@
-0.9.4:
-
-2009-06-25  Murray Cumming  <murrayc@murrayc.com>
-
-	* examples/events/event.cc: Fixed the build with the latest cluttermm.
+2009-08-26  Murray Cumming  <murrayc@murrayc.com>
+
+	Use clutter-gtk-0.10.
+	
+	* configure.in: Use clutter-gtk-0.10 instead of clutter-gtk-0.9.
+	* clutter-gtk/clutter-gtkmm.pc.in: Use clutter-gtk-0.10.
+	
+2009-07-29  Siavash Safi  <siavashs@siavashs.org>
+
+	* clutter-gtk/clutter-gtkmm/utility.cc: Updated several functions to add
+	the GError argument
+	* examples/events/event.cc: Updated to build against the new cluttermm
+	trunk(patch by Milosz Derezynski)
 
 0.9.3:
 
diff --git a/clutter-gtk/clutter-gtkmm.pc.in b/clutter-gtk/clutter-gtkmm.pc.in
index c47c975..830a3fa 100644
--- a/clutter-gtk/clutter-gtkmm.pc.in
+++ b/clutter-gtk/clutter-gtkmm.pc.in
@@ -5,7 +5,7 @@ includedir=@includedir@
 
 Name: clutter-gtkmm
 Description: C++ wrapper for clutter
-Requires: clutter-gtk-@API_VER@ cluttermm-@API_VER@ gtkmm-2.4
+Requires: clutter-gtk-0.10 cluttermm-@API_VER@ gtkmm-2.4
 Version: @VERSION@
 Libs: -L${libdir} -lclutter-gtkmm-@API_VER@
 Cflags: -I${includedir}/clutter-gtkmm-@API_VER@
diff --git a/clutter-gtk/clutter-gtkmm/utility.cc b/clutter-gtk/clutter-gtkmm/utility.cc
index a448e3e..0c4b62e 100644
--- a/clutter-gtk/clutter-gtkmm/utility.cc
+++ b/clutter-gtk/clutter-gtkmm/utility.cc
@@ -80,19 +80,58 @@ Glib::RefPtr<Texture> create_texture_from_icon_name(::Gtk::Widget& widget, const
   return Glib::wrap(CLUTTER_TEXTURE(gtk_clutter_texture_new_from_icon_name(widget.gobj(), icon_name.c_str(), GtkIconSize(int(size)))));
 }
 
+#ifdef GLIBMM_EXCEPTIONS_ENABLED
 void set_texture_from_pixbuf(const Glib::RefPtr<Texture>& texture, const Glib::RefPtr<Gdk::Pixbuf>& pixbuf)
-{
-  gtk_clutter_texture_set_from_pixbuf(texture->gobj(), pixbuf->gobj());
+#else
+void set_texture_from_pixbuf(const Glib::RefPtr<Texture>& texture, const Glib::RefPtr<Gdk::Pixbuf>& pixbuf, std::auto_ptr<Glib::Error>& error)
+#endif
+{
+  GError* gerror = 0;
+  gtk_clutter_texture_set_from_pixbuf(texture->gobj(), pixbuf->gobj(), &gerror);
+
+#ifdef GLIBMM_EXCEPTIONS_ENABLED
+  if(gerror)
+    ::Glib::Error::throw_exception(gerror);
+#else
+  if(gerror)
+    error = ::Glib::Error::throw_exception(gerror);
+#endif // GLIBMM_EXCEPTIONS_ENABLED
 }
 
+#ifdef GLIBMM_EXCEPTIONS_ENABLED
 void set_texture_from_stock(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& stock_id, ::Gtk::IconSize size)
-{
-  gtk_clutter_texture_set_from_stock(texture->gobj(), widget.gobj(), stock_id.c_str(), GtkIconSize(int(size)));
+#else
+void set_texture_from_stock(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& stock_id, ::Gtk::IconSize size, std::auto_ptr<Glib::Error>& error)
+#endif
+{
+  GError* gerror = 0;
+  gtk_clutter_texture_set_from_stock(texture->gobj(), widget.gobj(), stock_id.c_str(), GtkIconSize(int(size)), &gerror);
+
+#ifdef GLIBMM_EXCEPTIONS_ENABLED
+  if(gerror)
+    ::Glib::Error::throw_exception(gerror);
+#else
+  if(gerror)
+    error = ::Glib::Error::throw_exception(gerror);
+#endif // GLIBMM_EXCEPTIONS_ENABLED
 }
 
+#ifdef GLIBMM_EXCEPTIONS_ENABLED
 void set_texture_from_icon_name(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& icon_name, ::Gtk::IconSize size)
-{
-  gtk_clutter_texture_set_from_icon_name(texture->gobj(), widget.gobj(), icon_name.c_str(), GtkIconSize(int(size)));
+#else
+void set_texture_from_icon_name(const Glib::RefPtr<Texture>& texture, ::Gtk::Widget& widget, const Glib::ustring& icon_name, ::Gtk::IconSize size, std::auto_ptr<Glib::Error>& error)
+#endif
+{
+  GError* gerror = 0;
+  gtk_clutter_texture_set_from_icon_name(texture->gobj(), widget.gobj(), icon_name.c_str(), GtkIconSize(int(size)), &gerror);
+
+#ifdef GLIBMM_EXCEPTIONS_ENABLED
+  if(gerror)
+    ::Glib::Error::throw_exception(gerror);
+#else
+  if(gerror)
+    error = ::Glib::Error::throw_exception(gerror);
+#endif // GLIBMM_EXCEPTIONS_ENABLED
 }
 
 } //namespace Gtk
diff --git a/configure.in b/configure.in
index 0d61ba5..79d9e88 100644
--- a/configure.in
+++ b/configure.in
@@ -74,7 +74,7 @@ AC_CHECK_PROGS(PERL, perl5 perl)
 PKG_CHECK_MODULES(CLUTTER_GTKMM,
                   [gtkmm-2.4
                    cluttermm-0.9
-                   clutter-gtk-0.9 >= 0.9.1])
+                   clutter-gtk-0.10 >= 0.10.2])
 AC_SUBST(CLUTTER_GTKMM_CFLAGS)
 AC_SUBST(CLUTTER_GTKMM_LIBS)
 
diff --git a/examples/events/event.cc b/examples/events/event.cc
index 0c188dc..914b98f 100644
--- a/examples/events/event.cc
+++ b/examples/events/event.cc
@@ -44,8 +44,8 @@ Event::Event()
     g_error("Unable to load pixbuf\n");
 
   m_stage->add_actor(m_hand);
-  float width = 0;
-  float height = 0;
+  gfloat width = 0;
+  gfloat height = 0;
   m_hand->get_size(width, height);
   m_hand->set_position((CLUTTER_STAGE_WIDTH()/2) - (width/2), (CLUTTER_STAGE_HEIGHT()/2) - (height/2));
   m_hand->set_reactive();
@@ -105,8 +105,8 @@ bool Event::on_stage_capture(Clutter::Event* event)
 {
   if(event->type == CLUTTER_BUTTON_RELEASE)
   {
-    float x = 0;
-    float y = 0;
+    gfloat x = 0;
+    gfloat y = 0;
     clutter_event_get_coords(event, &x, &y);
 
     std::cout << "Event captured at (" << x << ", " << y << ")" << std::endl;

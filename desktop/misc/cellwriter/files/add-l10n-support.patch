Index: cellwriter-1.3.4_20110312/src/window.c
===================================================================
--- cellwriter-1.3.4_20110312.orig/src/window.c
+++ cellwriter-1.3.4_20110312/src/window.c
@@ -27,6 +27,8 @@ Foundation, Inc., 51 Franklin Street, Fi
 #include <X11/Xatom.h>
 #include <X11/Xlib.h>
 #include <gdk/gdkx.h>
+#include <glib.h>
+#include <glib/gprintf.h>
 
 /* Enable this option if your window manager support window gravity. With this
    option, the CellWriter window will resize from the bottom using the
@@ -101,11 +103,11 @@ static void toggle_button_labels(int on)
         static int labels_off;
 
         if (labels_off && on) {
-                gtk_button_set_label(GTK_BUTTON(train_button), "Train");
-                gtk_button_set_label(GTK_BUTTON(setup_button), "Setup");
-                gtk_button_set_label(GTK_BUTTON(clear_button), "Clear");
-                gtk_button_set_label(GTK_BUTTON(insert_button), "Insert");
-                gtk_button_set_label(GTK_BUTTON(keys_button), "Keys");
+                gtk_button_set_label(GTK_BUTTON(train_button), _("Train"));
+                gtk_button_set_label(GTK_BUTTON(setup_button), _("Setup"));
+                gtk_button_set_label(GTK_BUTTON(clear_button), _("Clear"));
+                gtk_button_set_label(GTK_BUTTON(insert_button),_("Insert"));
+                gtk_button_set_label(GTK_BUTTON(keys_button), _("Keys"));
         } else if (!labels_off && !on) {
                 gtk_button_set_label(GTK_BUTTON(train_button), "");
                 gtk_button_set_label(GTK_BUTTON(setup_button), "");
@@ -449,7 +451,7 @@ static GtkWidget *create_blocks_combo(vo
         while (block->name) {
                 if (block->enabled)
                         gtk_combo_box_append_text(GTK_COMBO_BOX(blocks_combo),
-                                                  block->name);
+                                                  _(block->name));
                 block++;
         }
         gtk_combo_box_set_active(GTK_COMBO_BOX(blocks_combo),
@@ -604,11 +606,11 @@ void window_create(void)
         gtk_label_set_line_wrap(GTK_LABEL(train_label), TRUE);
         gtk_label_set_justify(GTK_LABEL(train_label), GTK_JUSTIFY_FILL);
         gtk_label_set_markup(GTK_LABEL(train_label),
-                             "<b>Training Mode:</b> Carefully draw each "
+                             _("<b>Training Mode:</b> Carefully draw each "
                              "character in its cell. Multiple "
                              "samples will be stored for each character. "
                              "If you make a mistake, reset by "
-                             "pressing on the cell with the pen eraser.");
+                             "pressing on the cell with the pen eraser."));
         gtk_widget_show(train_label);
 
         /* Training info label colored box */
@@ -639,7 +641,7 @@ void window_create(void)
         bottom_box = gtk_hbox_new(FALSE, 0);
 
         /* Train button */
-        train_button = gtk_toggle_button_new_with_label("Train");
+        train_button = gtk_toggle_button_new_with_label(_("Train"));
         gtk_button_set_focus_on_click(GTK_BUTTON(train_button), FALSE);
         gtk_button_set_image(GTK_BUTTON(train_button),
                              gtk_image_new_from_stock(GTK_STOCK_MEDIA_RECORD,
@@ -652,7 +654,7 @@ void window_create(void)
                              NULL);
 
         /* Setup button */
-        setup_button = gtk_button_new_with_label("Setup");
+        setup_button = gtk_button_new_with_label(_("Setup"));
         gtk_button_set_focus_on_click(GTK_BUTTON(setup_button), FALSE);
         gtk_button_set_image(GTK_BUTTON(setup_button),
                              gtk_image_new_from_stock(GTK_STOCK_PREFERENCES,
@@ -661,7 +663,7 @@ void window_create(void)
         gtk_box_pack_start(GTK_BOX(bottom_box), setup_button, FALSE, FALSE, 0);
         g_signal_connect(G_OBJECT(setup_button), "clicked",
                          G_CALLBACK(options_dialog_open), 0);
-        gtk_tooltips_set_tip(tooltips, setup_button, "Edit program options",
+        gtk_tooltips_set_tip(tooltips, setup_button, _("Edit program options"),
                              NULL);
 
         /* Expanding box to keep things tidy */
@@ -674,7 +676,7 @@ void window_create(void)
         gtk_widget_set_no_show_all(blocks_combo, TRUE);
 
         /* Clear button */
-        clear_button = gtk_button_new_with_label("Clear");
+        clear_button = gtk_button_new_with_label(_("Clear"));
         gtk_button_set_focus_on_click(GTK_BUTTON(clear_button), FALSE);
         image = gtk_image_new_from_stock(GTK_STOCK_CLEAR, GTK_ICON_SIZE_BUTTON);
         gtk_button_set_image(GTK_BUTTON(clear_button), image);
@@ -682,11 +684,11 @@ void window_create(void)
         gtk_box_pack_start(GTK_BOX(bottom_box), clear_button, FALSE, FALSE, 0);
         g_signal_connect(G_OBJECT(clear_button), "clicked",
                          G_CALLBACK(cell_widget_clear), 0);
-        gtk_tooltips_set_tip(tooltips, clear_button, "Clear current input",
+        gtk_tooltips_set_tip(tooltips, clear_button, _("Clear current input"),
                              NULL);
 
         /* Keys button */
-        keys_button = gtk_toggle_button_new_with_label("Keys");
+        keys_button = gtk_toggle_button_new_with_label(_("Keys"));
         gtk_button_set_focus_on_click(GTK_BUTTON(keys_button), FALSE);
         image = gtk_image_new_from_icon_name("keyboard", GTK_ICON_SIZE_BUTTON);
         gtk_button_set_image(GTK_BUTTON(keys_button), image);
@@ -695,11 +697,11 @@ void window_create(void)
         g_signal_connect(G_OBJECT(keys_button), "toggled",
                          G_CALLBACK(keys_button_toggled), 0);
         gtk_tooltips_set_tip(tooltips, keys_button,
-                             "Switch between on-screen keyboard and "
-                             "handwriting input", NULL);
+                             _("Switch between on-screen keyboard and "
+                             "handwriting input"), NULL);
 
         /* Insert button */
-        insert_button = gtk_button_new_with_label("Enter");
+        insert_button = gtk_button_new_with_label(_("Enter"));
         gtk_button_set_focus_on_click(GTK_BUTTON(insert_button), FALSE);
         gtk_button_set_image(GTK_BUTTON(insert_button),
                              gtk_image_new_from_stock(GTK_STOCK_OK,
@@ -709,7 +711,7 @@ void window_create(void)
         g_signal_connect(G_OBJECT(insert_button), "clicked",
                          G_CALLBACK(insert_button_clicked), 0);
         gtk_tooltips_set_tip(tooltips, insert_button,
-                             "Insert input or press Enter key", NULL);
+                             _("Insert input or press Enter key"), NULL);
 
         /* Back buffer button */
         buffer_button = gtk_toggle_button_new();
@@ -720,7 +722,7 @@ void window_create(void)
         g_signal_connect(G_OBJECT(buffer_button), "pressed",
                          G_CALLBACK(buffer_button_pressed), NULL);
         gtk_tooltips_set_tip(tooltips, buffer_button,
-                             "Recall previously entered input", NULL);
+                             _("Recall previously entered input"), NULL);
         gtk_widget_set_sensitive(buffer_button, FALSE);
 
         /* Pack the regular bottom box */
@@ -833,133 +835,133 @@ void window_cleanup(void)
 /* This table is based on unicode-blocks.h from the gucharmap project */
 UnicodeBlock unicode_blocks[] =
 {
-        { TRUE,  0x0000, 0x007F, "Basic Latin" },
-        { TRUE,  0x0080, 0x00FF, "Latin-1 Supplement" },
-        { FALSE, 0x0100, 0x017F, "Latin Extended-A" },
-        { FALSE, 0x0180, 0x024F, "Latin Extended-B" },
-        { TRUE,  0x0000, 0x007F, "Turkish", {12, 0x0131, 0x0130, 0x015E, 0x015F, 0x011E, 0x011F, 0x00E7, 0x00C7, 0x00F6, 0x00D6, 0x00FC, 0x00DC} },
-        { FALSE, 0x0250, 0x02AF, "IPA Extensions" },
-        { FALSE, 0x02B0, 0x02FF, "Spacing Modifier Letters" },
-        { FALSE, 0x0300, 0x036F, "Combining Diacritical Marks" },
-        { FALSE, 0x0370, 0x03FF, "Greek and Coptic" },
-        { FALSE, 0x0400, 0x04FF, "Cyrillic" },
-        { FALSE, 0x0500, 0x052F, "Cyrillic Supplement" },
-        { FALSE, 0x0530, 0x058F, "Armenian" },
-        { FALSE, 0x0590, 0x05FF, "Hebrew" },
-        { FALSE, 0x0600, 0x06FF, "Arabic" },
-        { FALSE, 0x0700, 0x074F, "Syriac" },
-        { FALSE, 0x0750, 0x077F, "Arabic Supplement" },
-        { FALSE, 0x0780, 0x07BF, "Thaana" },
-        { FALSE, 0x07C0, 0x07FF, "N'Ko" },
-        { FALSE, 0x0900, 0x097F, "Devanagari" },
-        { FALSE, 0x0980, 0x09FF, "Bengali" },
-        { FALSE, 0x0A00, 0x0A7F, "Gurmukhi" },
-        { FALSE, 0x0A80, 0x0AFF, "Gujarati" },
-        { FALSE, 0x0B00, 0x0B7F, "Oriya" },
-        { FALSE, 0x0B80, 0x0BFF, "Tamil" },
-        { FALSE, 0x0C00, 0x0C7F, "Telugu" },
-        { FALSE, 0x0C80, 0x0CFF, "Kannada" },
-        { FALSE, 0x0D00, 0x0D7F, "Malayalam" },
-        { FALSE, 0x0D80, 0x0DFF, "Sinhala" },
-        { FALSE, 0x0E00, 0x0E7F, "Thai" },
-        { FALSE, 0x0E80, 0x0EFF, "Lao" },
-        { FALSE, 0x0F00, 0x0FFF, "Tibetan" },
-        { FALSE, 0x1000, 0x109F, "Myanmar" },
-        { FALSE, 0x10A0, 0x10FF, "Georgian" },
-        { FALSE, 0x1100, 0x11FF, "Hangul Jamo" },
-        { FALSE, 0x1200, 0x137F, "Ethiopic" },
-        { FALSE, 0x1380, 0x139F, "Ethiopic Supplement" },
-        { FALSE, 0x13A0, 0x13FF, "Cherokee" },
-        { FALSE, 0x1400, 0x167F, "Unified Canadian Aboriginal Syllabics" },
-        { FALSE, 0x1680, 0x169F, "Ogham" },
-        { FALSE, 0x16A0, 0x16FF, "Runic" },
-        { FALSE, 0x1700, 0x171F, "Tagalog" },
-        { FALSE, 0x1720, 0x173F, "Hanunoo" },
-        { FALSE, 0x1740, 0x175F, "Buhid" },
-        { FALSE, 0x1760, 0x177F, "Tagbanwa" },
-        { FALSE, 0x1780, 0x17FF, "Khmer" },
-        { FALSE, 0x1800, 0x18AF, "Mongolian" },
-        { FALSE, 0x1900, 0x194F, "Limbu" },
-        { FALSE, 0x1950, 0x197F, "Tai Le" },
-        { FALSE, 0x1980, 0x19DF, "New Tai Lue" },
-        { FALSE, 0x19E0, 0x19FF, "Khmer Symbols" },
-        { FALSE, 0x1A00, 0x1A1F, "Buginese" },
-        { FALSE, 0x1B00, 0x1B7F, "Balinese" },
-        { FALSE, 0x1D00, 0x1D7F, "Phonetic Extensions" },
-        { FALSE, 0x1D80, 0x1DBF, "Phonetic Extensions Supplement" },
-        { FALSE, 0x1DC0, 0x1DFF, "Combining Diacritical Marks Supplement" },
-        { FALSE, 0x1E00, 0x1EFF, "Latin Extended Additional" },
-        { FALSE, 0x1F00, 0x1FFF, "Greek Extended" },
-        { FALSE, 0x2000, 0x206F, "General Punctuation" },
-        { FALSE, 0x2070, 0x209F, "Superscripts and Subscripts" },
-        { FALSE, 0x20A0, 0x20CF, "Currency Symbols" },
-        { FALSE, 0x20D0, 0x20FF, "Combining Diacritical Marks for Symbols" },
-        { FALSE, 0x2100, 0x214F, "Letterlike Symbols" },
-        { FALSE, 0x2150, 0x218F, "Number Forms" },
-        { FALSE, 0x2190, 0x21FF, "Arrows" },
-        { FALSE, 0x2200, 0x22FF, "Mathematical Operators" },
-        { FALSE, 0x2300, 0x23FF, "Miscellaneous Technical" },
-        { FALSE, 0x2400, 0x243F, "Control Pictures" },
-        { FALSE, 0x2440, 0x245F, "Optical Character Recognition" },
-        { FALSE, 0x2460, 0x24FF, "Enclosed Alphanumerics" },
-        { FALSE, 0x2500, 0x257F, "Box Drawing" },
-        { FALSE, 0x2580, 0x259F, "Block Elements" },
-        { FALSE, 0x25A0, 0x25FF, "Geometric Shapes" },
-        { FALSE, 0x2600, 0x26FF, "Miscellaneous Symbols" },
-        { FALSE, 0x2700, 0x27BF, "Dingbats" },
-        { FALSE, 0x27C0, 0x27EF, "Miscellaneous Mathematical Symbols-A" },
-        { FALSE, 0x27F0, 0x27FF, "Supplemental Arrows-A" },
-        { FALSE, 0x2800, 0x28FF, "Braille Patterns" },
-        { FALSE, 0x2900, 0x297F, "Supplemental Arrows-B" },
-        { FALSE, 0x2980, 0x29FF, "Miscellaneous Mathematical Symbols-B" },
-        { FALSE, 0x2A00, 0x2AFF, "Supplemental Mathematical Operators" },
-        { FALSE, 0x2B00, 0x2BFF, "Miscellaneous Symbols and Arrows" },
-        { FALSE, 0x2C00, 0x2C5F, "Glagolitic" },
-        { FALSE, 0x2C60, 0x2C7F, "Latin Extended-C" },
-        { FALSE, 0x2C80, 0x2CFF, "Coptic" },
-        { FALSE, 0x2D00, 0x2D2F, "Georgian Supplement" },
-        { FALSE, 0x2D30, 0x2D7F, "Tifinagh" },
-        { FALSE, 0x2D80, 0x2DDF, "Ethiopic Extended" },
-        { FALSE, 0x2E00, 0x2E7F, "Supplemental Punctuation" },
-        { FALSE, 0x2E80, 0x2EFF, "CJK Radicals Supplement" },
-        { FALSE, 0x2F00, 0x2FDF, "Kangxi Radicals" },
-        { FALSE, 0x2FF0, 0x2FFF, "Ideographic Description Characters" },
-        { FALSE, 0x3000, 0x303F, "CJK Symbols and Punctuation" },
-        { FALSE, 0x3040, 0x309F, "Hiragana" },
-        { FALSE, 0x30A0, 0x30FF, "Katakana" },
-        { FALSE, 0x3100, 0x312F, "Bopomofo" },
-        { FALSE, 0x3130, 0x318F, "Hangul Compatibility Jamo" },
-        { FALSE, 0x3190, 0x319F, "Kanbun" },
-        { FALSE, 0x31A0, 0x31BF, "Bopomofo Extended" },
-        { FALSE, 0x31C0, 0x31EF, "CJK Strokes" },
-        { FALSE, 0x31F0, 0x31FF, "Katakana Phonetic Extensions" },
-        { FALSE, 0x3200, 0x32FF, "Enclosed CJK Letters and Months" },
-        { FALSE, 0x3300, 0x33FF, "CJK Compatibility" },
-        { FALSE, 0x3400, 0x4DBF, "CJK Unified Ideographs Extension A" },
-        { FALSE, 0x4DC0, 0x4DFF, "Yijing Hexagram Symbols" },
-        { FALSE, 0x4E00, 0x9FFF, "CJK Unified Ideographs" },
-        { FALSE, 0xA000, 0xA48F, "Yi Syllables" },
-        { FALSE, 0xA490, 0xA4CF, "Yi Radicals" },
-        { FALSE, 0xA700, 0xA71F, "Modifier Tone Letters" },
-        { FALSE, 0xA720, 0xA7FF, "Latin Extended-D" },
-        { FALSE, 0xA800, 0xA82F, "Syloti Nagri" },
-        { FALSE, 0xA840, 0xA87F, "Phags-pa" },
-        { FALSE, 0xAC00, 0xD7AF, "Hangul Syllables" },
-        { FALSE, 0xD800, 0xDB7F, "High Surrogates" },
-        { FALSE, 0xDB80, 0xDBFF, "High Private Use Surrogates" },
-        { FALSE, 0xDC00, 0xDFFF, "Low Surrogates" },
-        { FALSE, 0xE000, 0xF8FF, "Private Use Area" },
-        { FALSE, 0xF900, 0xFAFF, "CJK Compatibility Ideographs" },
-        { FALSE, 0xFB00, 0xFB4F, "Alphabetic Presentation Forms" },
-        { FALSE, 0xFB50, 0xFDFF, "Arabic Presentation Forms-A" },
-        { FALSE, 0xFE00, 0xFE0F, "Variation Selectors" },
-        { FALSE, 0xFE10, 0xFE1F, "Vertical Forms" },
-        { FALSE, 0xFE20, 0xFE2F, "Combining Half Marks" },
-        { FALSE, 0xFE30, 0xFE4F, "CJK Compatibility Forms" },
-        { FALSE, 0xFE50, 0xFE6F, "Small Form Variants" },
-        { FALSE, 0xFE70, 0xFEFF, "Arabic Presentation Forms-B" },
-        { FALSE, 0xFF00, 0xFFEF, "Halfwidth and Fullwidth Forms" },
-        { FALSE, 0xFFF0, 0xFFFF, "Specials" },
+        { TRUE,  0x0000, 0x007F, N_("Basic Latin") },
+        { TRUE,  0x0080, 0x00FF, N_("Latin-1 Supplement") },
+        { FALSE, 0x0100, 0x017F, N_("Latin Extended-A") },
+        { FALSE, 0x0180, 0x024F, N_("Latin Extended-B") },
+        { TRUE,  0x0000, 0x007F, N_("Turkish"), {12, 0x0131, 0x0130, 0x015E, 0x015F, 0x011E, 0x011F, 0x00E7, 0x00C7, 0x00F6, 0x00D6, 0x00FC, 0x00DC} },
+        { FALSE, 0x0250, 0x02AF, N_("IPA Extensions") },
+        { FALSE, 0x02B0, 0x02FF, N_("Spacing Modifier Letters") },
+        { FALSE, 0x0300, 0x036F, N_("Combining Diacritical Marks") },
+        { FALSE, 0x0370, 0x03FF, N_("Greek and Coptic") },
+        { FALSE, 0x0400, 0x04FF, N_("Cyrillic") },
+        { FALSE, 0x0500, 0x052F, N_("Cyrillic Supplement") },
+        { FALSE, 0x0530, 0x058F, N_("Armenian") },
+        { FALSE, 0x0590, 0x05FF, N_("Hebrew") },
+        { FALSE, 0x0600, 0x06FF, N_("Arabic") },
+        { FALSE, 0x0700, 0x074F, N_("Syriac") },
+        { FALSE, 0x0750, 0x077F, N_("Arabic Supplement") },
+        { FALSE, 0x0780, 0x07BF, N_("Thaana") },
+        { FALSE, 0x07C0, 0x07FF, N_("N'Ko") },
+        { FALSE, 0x0900, 0x097F, N_("Devanagari") },
+        { FALSE, 0x0980, 0x09FF, N_("Bengali") },
+        { FALSE, 0x0A00, 0x0A7F, N_("Gurmukhi") },
+        { FALSE, 0x0A80, 0x0AFF, N_("Gujarati") },
+        { FALSE, 0x0B00, 0x0B7F, N_("Oriya") },
+        { FALSE, 0x0B80, 0x0BFF, N_("Tamil") },
+        { FALSE, 0x0C00, 0x0C7F, N_("Telugu") },
+        { FALSE, 0x0C80, 0x0CFF, N_("Kannada") },
+        { FALSE, 0x0D00, 0x0D7F, N_("Malayalam") },
+        { FALSE, 0x0D80, 0x0DFF, N_("Sinhala") },
+        { FALSE, 0x0E00, 0x0E7F, N_("Thai") },
+        { FALSE, 0x0E80, 0x0EFF, N_("Lao") },
+        { FALSE, 0x0F00, 0x0FFF, N_("Tibetan") },
+        { FALSE, 0x1000, 0x109F, N_("Myanmar") },
+        { FALSE, 0x10A0, 0x10FF, N_("Georgian") },
+        { FALSE, 0x1100, 0x11FF, N_("Hangul Jamo") },
+        { FALSE, 0x1200, 0x137F, N_("Ethiopic") },
+        { FALSE, 0x1380, 0x139F, N_("Ethiopic Supplement") },
+        { FALSE, 0x13A0, 0x13FF, N_("Cherokee") },
+        { FALSE, 0x1400, 0x167F, N_("Unified Canadian Aboriginal Syllabics") },
+        { FALSE, 0x1680, 0x169F, N_("Ogham") },
+        { FALSE, 0x16A0, 0x16FF, N_("Runic") },
+        { FALSE, 0x1700, 0x171F, N_("Tagalog") },
+        { FALSE, 0x1720, 0x173F, N_("Hanunoo") },
+        { FALSE, 0x1740, 0x175F, N_("Buhid") },
+        { FALSE, 0x1760, 0x177F, N_("Tagbanwa") },
+        { FALSE, 0x1780, 0x17FF, N_("Khmer") },
+        { FALSE, 0x1800, 0x18AF, N_("Mongolian") },
+        { FALSE, 0x1900, 0x194F, N_("Limbu") },
+        { FALSE, 0x1950, 0x197F, N_("Tai Le") },
+        { FALSE, 0x1980, 0x19DF, N_("New Tai Lue") },
+        { FALSE, 0x19E0, 0x19FF, N_("Khmer Symbols") },
+        { FALSE, 0x1A00, 0x1A1F, N_("Buginese") },
+        { FALSE, 0x1B00, 0x1B7F, N_("Balinese") },
+        { FALSE, 0x1D00, 0x1D7F, N_("Phonetic Extensions") },
+        { FALSE, 0x1D80, 0x1DBF, N_("Phonetic Extensions Supplement") },
+        { FALSE, 0x1DC0, 0x1DFF, N_("Combining Diacritical Marks Supplement") },
+        { FALSE, 0x1E00, 0x1EFF, N_("Latin Extended Additional") },
+        { FALSE, 0x1F00, 0x1FFF, N_("Greek Extended") },
+        { FALSE, 0x2000, 0x206F, N_("General Punctuation") },
+        { FALSE, 0x2070, 0x209F, N_("Superscripts and Subscripts") },
+        { FALSE, 0x20A0, 0x20CF, N_("Currency Symbols") },
+        { FALSE, 0x20D0, 0x20FF, N_("Combining Diacritical Marks for Symbols") },
+        { FALSE, 0x2100, 0x214F, N_("Letterlike Symbols") },
+        { FALSE, 0x2150, 0x218F, N_("Number Forms") },
+        { FALSE, 0x2190, 0x21FF, N_("Arrows") },
+        { FALSE, 0x2200, 0x22FF, N_("Mathematical Operators") },
+        { FALSE, 0x2300, 0x23FF, N_("Miscellaneous Technical") },
+        { FALSE, 0x2400, 0x243F, N_("Control Pictures") },
+        { FALSE, 0x2440, 0x245F, N_("Optical Character Recognition") },
+        { FALSE, 0x2460, 0x24FF, N_("Enclosed Alphanumerics") },
+        { FALSE, 0x2500, 0x257F, N_("Box Drawing") },
+        { FALSE, 0x2580, 0x259F, N_("Block Elements") },
+        { FALSE, 0x25A0, 0x25FF, N_("Geometric Shapes") },
+        { FALSE, 0x2600, 0x26FF, N_("Miscellaneous Symbols") },
+        { FALSE, 0x2700, 0x27BF, N_("Dingbats") },
+        { FALSE, 0x27C0, 0x27EF, N_("Miscellaneous Mathematical Symbols-A") },
+        { FALSE, 0x27F0, 0x27FF, N_("Supplemental Arrows-A") },
+        { FALSE, 0x2800, 0x28FF, N_("Braille Patterns") },
+        { FALSE, 0x2900, 0x297F, N_("Supplemental Arrows-B") },
+        { FALSE, 0x2980, 0x29FF, N_("Miscellaneous Mathematical Symbols-B") },
+        { FALSE, 0x2A00, 0x2AFF, N_("Supplemental Mathematical Operators") },
+        { FALSE, 0x2B00, 0x2BFF, N_("Miscellaneous Symbols and Arrows") },
+        { FALSE, 0x2C00, 0x2C5F, N_("Glagolitic") },
+        { FALSE, 0x2C60, 0x2C7F, N_("Latin Extended-C") },
+        { FALSE, 0x2C80, 0x2CFF, N_("Coptic") },
+        { FALSE, 0x2D00, 0x2D2F, N_("Georgian Supplement") },
+        { FALSE, 0x2D30, 0x2D7F, N_("Tifinagh") },
+        { FALSE, 0x2D80, 0x2DDF, N_("Ethiopic Extended") },
+        { FALSE, 0x2E00, 0x2E7F, N_("Supplemental Punctuation") },
+        { FALSE, 0x2E80, 0x2EFF, N_("CJK Radicals Supplement") },
+        { FALSE, 0x2F00, 0x2FDF, N_("Kangxi Radicals") },
+        { FALSE, 0x2FF0, 0x2FFF, N_("Ideographic Description Characters") },
+        { FALSE, 0x3000, 0x303F, N_("CJK Symbols and Punctuation") },
+        { FALSE, 0x3040, 0x309F, N_("Hiragana") },
+        { FALSE, 0x30A0, 0x30FF, N_("Katakana") },
+        { FALSE, 0x3100, 0x312F, N_("Bopomofo") },
+        { FALSE, 0x3130, 0x318F, N_("Hangul Compatibility Jamo") },
+        { FALSE, 0x3190, 0x319F, N_("Kanbun") },
+        { FALSE, 0x31A0, 0x31BF, N_("Bopomofo Extended") },
+        { FALSE, 0x31C0, 0x31EF, N_("CJK Strokes") },
+        { FALSE, 0x31F0, 0x31FF, N_("Katakana Phonetic Extensions") },
+        { FALSE, 0x3200, 0x32FF, N_("Enclosed CJK Letters and Months") },
+        { FALSE, 0x3300, 0x33FF, N_("CJK Compatibility") },
+        { FALSE, 0x3400, 0x4DBF, N_("CJK Unified Ideographs Extension A") },
+        { FALSE, 0x4DC0, 0x4DFF, N_("Yijing Hexagram Symbols") },
+        { FALSE, 0x4E00, 0x9FFF, N_("CJK Unified Ideographs") },
+        { FALSE, 0xA000, 0xA48F, N_("Yi Syllables") },
+        { FALSE, 0xA490, 0xA4CF, N_("Yi Radicals") },
+        { FALSE, 0xA700, 0xA71F, N_("Modifier Tone Letters") },
+        { FALSE, 0xA720, 0xA7FF, N_("Latin Extended-D") },
+        { FALSE, 0xA800, 0xA82F, N_("Syloti Nagri") },
+        { FALSE, 0xA840, 0xA87F, N_("Phags-pa") },
+        { FALSE, 0xAC00, 0xD7AF, N_("Hangul Syllables") },
+        { FALSE, 0xD800, 0xDB7F, N_("High Surrogates") },
+        { FALSE, 0xDB80, 0xDBFF, N_("High Private Use Surrogates") },
+        { FALSE, 0xDC00, 0xDFFF, N_("Low Surrogates") },
+        { FALSE, 0xE000, 0xF8FF, N_("Private Use Area") },
+        { FALSE, 0xF900, 0xFAFF, N_("CJK Compatibility Ideographs") },
+        { FALSE, 0xFB00, 0xFB4F, N_("Alphabetic Presentation Forms") },
+        { FALSE, 0xFB50, 0xFDFF, N_("Arabic Presentation Forms-A") },
+        { FALSE, 0xFE00, 0xFE0F, N_("Variation Selectors") },
+        { FALSE, 0xFE10, 0xFE1F, N_("Vertical Forms") },
+        { FALSE, 0xFE20, 0xFE2F, N_("Combining Half Marks") },
+        { FALSE, 0xFE30, 0xFE4F, N_("CJK Compatibility Forms") },
+        { FALSE, 0xFE50, 0xFE6F, N_("Small Form Variants") },
+        { FALSE, 0xFE70, 0xFEFF, N_("Arabic Presentation Forms-B") },
+        { FALSE, 0xFF00, 0xFFEF, N_("Halfwidth and Fullwidth Forms") },
+        { FALSE, 0xFFF0, 0xFFFF, N_("Specials") },
 
         /* Cut the table here because we only support 4-byte characters */
         { FALSE, 0,      0,      NULL },
@@ -992,7 +994,7 @@ void unicode_block_toggle(int block, int
                 gtk_combo_box_remove_text(GTK_COMBO_BOX(blocks_combo), pos);
         else
                 gtk_combo_box_insert_text(GTK_COMBO_BOX(blocks_combo), pos,
-                                          unicode_blocks[block].name);
+                                          _(unicode_blocks[block].name));
         update_enabled_samples();
         if ((!on && block <= training_block_saved) || active < 0)
                 gtk_combo_box_set_active(GTK_COMBO_BOX(blocks_combo),
@@ -1009,13 +1011,13 @@ void unicode_block_toggle(int block, int
         Start-up message dialog
 */
 
-#define WELCOME_MSG "You are either starting " PACKAGE_NAME " for the first " \
-                    "time or have not yet created any training samples. " \
-                    PACKAGE_NAME " requires accurate training samples of " \
-                    "your characters before it can work. " \
-                    "The program will now enter training mode. " \
-                    "Carefully draw each character in its cell and then " \
-                    "press the 'Train' button."
+const char *welcome_msg = N_("You are either starting CellWriter for the first "
+                          "time or have not yet created any training samples. "
+                          "CellWriter requires accurate training samples of "
+                          "your characters before it can work. "
+                          "The program will now enter training mode. "
+                          "Carefully draw each character in its cell and then "
+                          "press the '%s' button.");
 
 void startup_splash_show(void)
 {
@@ -1025,11 +1027,11 @@ void startup_splash_show(void)
                                         GTK_DIALOG_DESTROY_WITH_PARENT |
                                         GTK_DIALOG_MODAL, GTK_MESSAGE_INFO,
                                         GTK_BUTTONS_OK,
-                                        "Welcome to " PACKAGE_STRING "!");
+                                        g_strdup_printf(_("Welcome to %s!"), PACKAGE_STRING));
         gtk_message_dialog_format_secondary_text(GTK_MESSAGE_DIALOG(dialog),
-                                                 WELCOME_MSG);
+                                                 g_strdup_printf(_(welcome_msg), _("Train")));
         gtk_window_set_title(GTK_WINDOW(dialog),
-                             "Welcome to " PACKAGE_NAME "!");
+                             g_strdup_printf(_("Welcome to %s!"), PACKAGE_NAME));
         gtk_dialog_run(GTK_DIALOG(dialog));
         gtk_widget_destroy(dialog);
 
Index: cellwriter-1.3.4_20110312/configure.ac
===================================================================
--- cellwriter-1.3.4_20110312.orig/configure.ac
+++ cellwriter-1.3.4_20110312/configure.ac
@@ -7,6 +7,8 @@ AM_INIT_AUTOMAKE
 AC_CONFIG_SRCDIR([src/main.c])
 AC_CONFIG_HEADER([config.h])
 
+AC_CONFIG_FILES([po/Makefile.in])
+
 # URL launched when Help button is pressed
 AC_ARG_VAR([CELLWRITER_URL], [URL for help website])
 if test "x${CELLWRITER_URL}" == "x"; then
@@ -28,6 +30,17 @@ AC_PROG_MKDIR_P
 # Math library
 AC_CHECK_LIB(m, atan2, [], [AC_ERROR(Math library not installed or invalid!)])
 
+# Internationalization
+GETTEXT_PACKAGE=cellwriter
+AC_SUBST(GETTEXT_PACKAGE)
+AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [Package name for gettext])
+
+AM_GNU_GETTEXT([external])
+AM_GNU_GETTEXT_VERSION([0.17])
+
+IT_PROG_INTLTOOL([0.35.0])
+#
+
 # GTK+2
 PKG_CHECK_MODULES(GTK, gtk+-2.0 >= 2.8)
 AC_SUBST(GTK_CFLAGS)
Index: cellwriter-1.3.4_20110312/Makefile.am
===================================================================
--- cellwriter-1.3.4_20110312.orig/Makefile.am
+++ cellwriter-1.3.4_20110312/Makefile.am
@@ -1,7 +1,9 @@
 
 INCLUDES = @GTK_CFLAGS@
 LDADD = @GTK_LIBS@
-AM_CFLAGS = -DDATADIR=\"$(datadir)\" -DPKGDATADIR=\"$(pkgdatadir)\"
+AM_CFLAGS = -DLOCALEDIR=\"$(localedir)\" -DDATADIR=\"$(datadir)\" -DPKGDATADIR=\"$(pkgdatadir)\"
+
+SUBDIRS = po
 
 bin_PROGRAMS = cellwriter
 cellwriter_SOURCES = \
Index: cellwriter-1.3.4_20110312/src/main.c
===================================================================
--- cellwriter-1.3.4_20110312.orig/src/main.c
+++ cellwriter-1.3.4_20110312/src/main.c
@@ -845,6 +845,13 @@ int main(int argc, char *argv[])
         GError *error;
         const char *token;
 
+        /* I18n */
+        setlocale(LC_ALL, "");
+        #if ENABLE_NLS
+        bindtextdomain(PACKAGE, LOCALEDIR);
+        textdomain(PACKAGE);
+        #endif
+
         /* Set GDK_NATIVE_WINDOWS to 1 to workaround a nasty KWin bug
          * avoiding multi-stroke input
          * https://bugs.kde.org/show_bug.cgi?id=234926 */
@@ -895,13 +902,13 @@ int main(int argc, char *argv[])
                 dialog = gtk_message_dialog_new(NULL, GTK_DIALOG_MODAL,
                                                 GTK_MESSAGE_ERROR,
                                                 GTK_BUTTONS_OK,
-                                                "Xtest extension not "
-                                                "supported");
-                gtk_window_set_title(GTK_WINDOW(dialog), "Initilization Error");
+                                                _("Xtest extension not "
+                                                "supported"));
+                gtk_window_set_title(GTK_WINDOW(dialog), _("Initialization Error"));
                 gtk_message_dialog_format_secondary_text(
                         GTK_MESSAGE_DIALOG(dialog),
-                        "Your Xserver does not support the Xtest extension. "
-                        PACKAGE_NAME " cannot generate keystrokes without it.");
+                        _("Your Xserver does not support the Xtest extension. "
+                        PACKAGE_NAME " cannot generate keystrokes without it."));
                 gtk_dialog_run(GTK_DIALOG(dialog));
                 gtk_widget_destroy(dialog);
         }
Index: cellwriter-1.3.4_20110312/po/POTFILES.in
===================================================================
--- /dev/null
+++ cellwriter-1.3.4_20110312/po/POTFILES.in
@@ -0,0 +1,5 @@
+src/cellwidget.c
+src/main.c
+src/options.c
+src/statusicon.c
+src/window.c
Index: cellwriter-1.3.4_20110312/src/cellwidget.c
===================================================================
--- cellwriter-1.3.4_20110312.orig/src/cellwidget.c
+++ cellwriter-1.3.4_20110312/src/cellwidget.c
@@ -1301,7 +1301,7 @@ static void show_context_menu(int button
         menu_cell = current_cell;
 
         /* Menu -> Delete */
-        widget = gtk_menu_item_new_with_label("Delete");
+        widget = gtk_menu_item_new_with_label(_("Delete"));
         g_signal_connect(G_OBJECT(widget), "activate",
                          G_CALLBACK(alt_menu_delete), NULL);
         gtk_menu_attach(GTK_MENU(menu), widget, 0, 1, 0, 1);
@@ -1311,7 +1311,7 @@ static void show_context_menu(int button
                 const char *label;
 
                 label = cells[menu_cell].flags & CELL_SHOW_INK ?
-                        "Hide ink" : "Show ink";
+                        _("Hide ink") : _("Show ink");
                 widget = gtk_menu_item_new_with_label(label);
                 g_signal_connect(G_OBJECT(widget), "activate",
                                  G_CALLBACK(alt_menu_show_ink), NULL);
@@ -1321,10 +1321,10 @@ static void show_context_menu(int button
         /* Menu -> Change case */
         if (g_unichar_isupper(cells[menu_cell].ch) ||
                 g_unichar_islower(cells[menu_cell].ch)) {
-                const char *string = "To upper";
+                const char *string = _("To upper");
 
                 if (g_unichar_isupper(cells[menu_cell].ch))
-                        string = "To lower";
+                        string = _("To lower");
                 widget = gtk_menu_item_new_with_label(string);
                 g_signal_connect(G_OBJECT(widget), "activate",
                                  G_CALLBACK(alt_menu_change_case), NULL);
@@ -2114,7 +2114,7 @@ GtkWidget *cell_widget_new(void)
 
         /* Create training menu */
         training_menu = gtk_menu_new();
-        widget = gtk_menu_item_new_with_label("Reset");
+        widget = gtk_menu_item_new_with_label(_("Reset"));
         g_signal_connect(G_OBJECT(widget), "activate",
                          G_CALLBACK(training_menu_reset), NULL);
         gtk_menu_attach(GTK_MENU(training_menu), widget, 0, 1, 0, 1);
Index: cellwriter-1.3.4_20110312/src/options.c
===================================================================
--- cellwriter-1.3.4_20110312.orig/src/options.c
+++ cellwriter-1.3.4_20110312/src/options.c
@@ -128,9 +128,9 @@ static GtkWidget *create_blocks_list(voi
         view = gtk_tree_view_new_with_model(GTK_TREE_MODEL(blocks_store));
         gtk_tree_view_set_headers_visible(GTK_TREE_VIEW(view), FALSE);
         gtk_tooltips_set_tip(tooltips, view,
-                             "Controls which blocks are enabled for "
+                             _("Controls which blocks are enabled for "
                              "recognition and appear in the training mode "
-                             "combo box.", NULL);
+                             "combo box."), NULL);
 
         /* Column */
         column = gtk_tree_view_column_new();
@@ -149,7 +149,7 @@ static GtkWidget *create_blocks_list(voi
         while (block->name) {
                 gtk_list_store_append(blocks_store, &iter);
                 gtk_list_store_set(blocks_store, &iter, 0, block->enabled,
-                                   1, block->name, -1);
+                                   1, _(block->name), -1);
                 block++;
         }
 
@@ -305,12 +305,12 @@ static GtkWidget *create_color_table(voi
                 GdkColor *color;
                 int reset_cursor;
         } colors[] = {
-                { "<b>Custom colors:</b>", NULL, FALSE },
-                { "Used cell:", &custom_active_color, FALSE },
-                { "Blank cell:", &custom_inactive_color, FALSE },
-                { "Highlight:", &custom_select_color, FALSE },
-                { "Text and ink:", &custom_ink_color, TRUE  },
-                { "Key face:", &custom_key_color, FALSE },
+                { N_("<b>Custom colors:</b>"), NULL, FALSE },
+                { N_("Used cell:"), &custom_active_color, FALSE },
+                { N_("Blank cell:"), &custom_inactive_color, FALSE },
+                { N_("Highlight:"), &custom_select_color, FALSE },
+                { N_("Text and ink:"), &custom_ink_color, TRUE  },
+                { N_("Key face:"), &custom_key_color, FALSE },
         };
 
         entries = (int)(sizeof (colors) / sizeof (*colors));
@@ -320,14 +320,14 @@ static GtkWidget *create_color_table(voi
 
                 /* Headers */
                 if (!colors[i].color)
-                        w = label_new_markup(colors[i].string);
+                        w = label_new_markup(_(colors[i].string));
 
                 /* Color label */
                 else {
                         hbox = gtk_hbox_new(FALSE, 0);
                         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1),
                                            FALSE, FALSE, 0);
-                        w = label_new_markup(colors[i].string);
+                        w = label_new_markup(_(colors[i].string));
                         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
                         gtk_misc_set_alignment(GTK_MISC(w), 0, 0.5);
                         w = hbox;
@@ -381,11 +381,11 @@ static void create_dialog(void)
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
         g_signal_connect(G_OBJECT(w), "clicked",
                          G_CALLBACK(help_clicked), NULL);
-        gtk_tooltips_set_tip(tooltips, w, "Launch program website", NULL);
+        gtk_tooltips_set_tip(tooltips, w, _("Launch program website"), NULL);
 #endif
 
         /* Close button */
-        w = gtk_button_new_with_label("Close");
+        w = gtk_button_new_with_label(_("Close"));
         gtk_button_set_image(GTK_BUTTON(w),
                              gtk_image_new_from_stock(GTK_STOCK_CLOSE,
                                                       GTK_ICON_SIZE_BUTTON));
@@ -402,24 +402,24 @@ static void create_dialog(void)
         /* View page */
         vbox2 = gtk_vbox_new(FALSE, 0);
         gtk_container_set_border_width(GTK_CONTAINER(vbox2), 8);
-        w = gtk_label_new("Interface");
+        w = gtk_label_new(_("Interface"));
         gtk_notebook_append_page(GTK_NOTEBOOK(notebook), vbox2, w);
 
         /* View -> Dimensions */
-        w = label_new_markup("<b>Dimensions</b>");
+        w = label_new_markup(_("<b>Dimensions</b>"));
         gtk_box_pack_start(GTK_BOX(vbox2), w, FALSE, FALSE, 0);
 
         /* View -> Dimensions -> Cell size */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = label_new_markup("Cells: ");
+        w = label_new_markup(_("Cells: "));
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
         cell_width_spin = spin_button_new_int(CELL_WIDTH_MIN, cell_height,
                                               &cell_width, TRUE);
         g_signal_connect(G_OBJECT(cell_width_spin), "value-changed",
                          G_CALLBACK(cell_width_value_changed), NULL);
         gtk_box_pack_start(GTK_BOX(hbox), cell_width_spin, FALSE, FALSE, 0);
-        w = label_new_markup(" by ");
+        w = label_new_markup(_(" by "));
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
         cell_height_spin = spin_button_new_int(cell_width, CELL_HEIGHT_MAX,
                                                &cell_height, TRUE);
@@ -427,53 +427,53 @@ static void create_dialog(void)
         g_signal_connect(G_OBJECT(cell_height_spin), "value-changed",
                          G_CALLBACK(cell_height_value_changed), NULL);
         gtk_box_pack_start(GTK_BOX(hbox), cell_height_spin, FALSE, FALSE, 0);
-        w = label_new_markup(" pixels");
+        w = label_new_markup(_(" pixels"));
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
 
         /* View -> Dimensions -> Grid */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = label_new_markup("Grid: ");
+        w = label_new_markup(_("Grid: "));
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
         w = spin_button_new_int(6, 48, &cell_cols_pref, TRUE);
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
-        w = label_new_markup(" by ");
+        w = label_new_markup(_(" by "));
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
         w = spin_button_new_int(1, 8, &cell_rows_pref, TRUE);
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
-        w = label_new_markup(" cells");
+        w = label_new_markup(_(" cells"));
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
 
         /* View -> Dimensions -> Keyboard size */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = label_new_markup("Keyboard: ");
+        w = label_new_markup(_("Keyboard: "));
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
         w = spin_button_new_int(KEYBOARD_SIZE_MIN, 1400, &keyboard_size, TRUE);
         gtk_spin_button_set_increments(GTK_SPIN_BUTTON(w), 16, 4);
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
-        w = label_new_markup(" pixels wide");
+        w = label_new_markup(_(" pixels wide"));
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
 
         /* View -> Window */
         gtk_box_pack_start(GTK_BOX(vbox2), spacer_new(-1, 8), FALSE, FALSE, 0);
-        w = label_new_markup("<b>Window</b>");
+        w = label_new_markup(_("<b>Window</b>"));
         gtk_box_pack_start(GTK_BOX(vbox2), w, FALSE, FALSE, 0);
 
         /* View -> Window -> Button labels */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = check_button_new("Show button labels", &window_button_labels, TRUE);
+        w = check_button_new(_("Show button labels"), &window_button_labels, TRUE);
         gtk_box_pack_start(GTK_BOX(hbox), w, TRUE, TRUE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
 
         /* View -> Window -> On-screen keyboard */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = check_button_new("Show on-screen keyboard",
+        w = check_button_new(_("Show on-screen keyboard"),
                              &keyboard_enabled, TRUE);
         gtk_box_pack_start(GTK_BOX(hbox), w, TRUE, TRUE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
@@ -481,27 +481,27 @@ static void create_dialog(void)
         /* View -> Window -> Enable */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = check_button_new("Enable extended input events",
+        w = check_button_new(_("Enable extended input events"),
                              &xinput_enabled, FALSE);
         g_signal_connect(G_OBJECT(w), "toggled",
                          G_CALLBACK(xinput_enabled_toggled), NULL);
         gtk_box_pack_start(GTK_BOX(hbox), w, TRUE, TRUE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
         gtk_tooltips_set_tip(tooltips, w,
-                             "If you cannot write in the cells or the ink "
+                             _("If you cannot write in the cells or the ink "
                              "does not appear where it should, you can try "
                              "disabling extended input events. Note that this "
-                             "will disable the pen eraser.", NULL);
+                             "will disable the pen eraser."), NULL);
 
         /* View -> Window -> Docking */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = label_new_markup("Window docking: ");
+        w = label_new_markup(_("Window docking: "));
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
         w = gtk_combo_box_new_text();
-        gtk_combo_box_append_text(GTK_COMBO_BOX(w), "Disabled");
-        gtk_combo_box_append_text(GTK_COMBO_BOX(w), "Top");
-        gtk_combo_box_append_text(GTK_COMBO_BOX(w), "Bottom");
+        gtk_combo_box_append_text(GTK_COMBO_BOX(w), _("Disabled"));
+        gtk_combo_box_append_text(GTK_COMBO_BOX(w), _("Top"));
+        gtk_combo_box_append_text(GTK_COMBO_BOX(w), _("Bottom"));
         gtk_combo_box_set_active(GTK_COMBO_BOX(w), window_docked);
         g_signal_connect(G_OBJECT(w), "changed",
                          G_CALLBACK(window_docking_changed), NULL);
@@ -510,25 +510,25 @@ static void create_dialog(void)
 
         /* View -> Status icon */
         gtk_box_pack_start(GTK_BOX(vbox2), spacer_new(-1, 8), FALSE, FALSE, 0);
-        w = label_new_markup("<b>Status icon</b>");
+        w = label_new_markup(_("<b>Status icon</b>"));
         gtk_box_pack_start(GTK_BOX(vbox2), w, FALSE, FALSE, 0);
 
         /* View -> Status icon -> Enable */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = check_button_new("Open menu on left click",
+        w = check_button_new(_("Open menu on left click"),
                              &status_menu_left_click, FALSE);
         gtk_box_pack_start(GTK_BOX(hbox), w, TRUE, TRUE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
 
         /* Colors page */
         vbox2 = gtk_vbox_new(FALSE, 0);
-        w = gtk_label_new("Colors");
+        w = gtk_label_new(_("Colors"));
         gtk_notebook_append_page(GTK_NOTEBOOK(notebook), vbox2, w);
         gtk_container_set_border_width(GTK_CONTAINER(vbox2), 8);
 
         /* Colors -> Use style */
-        w = check_button_new("Use default theme colors", &style_colors, FALSE);
+        w = check_button_new(_("Use default theme colors"), &style_colors, FALSE);
         g_signal_connect(G_OBJECT(w), "toggled",
                          G_CALLBACK(style_colors_changed), NULL);
         gtk_box_pack_start(GTK_BOX(vbox2), w, FALSE, FALSE, 0);
@@ -541,12 +541,12 @@ static void create_dialog(void)
 
         /* Unicode page */
         vbox2 = gtk_vbox_new(FALSE, 0);
-        w = gtk_label_new("Languages");
+        w = gtk_label_new(_("Languages"));
         gtk_notebook_append_page(GTK_NOTEBOOK(notebook), vbox2, w);
         gtk_container_set_border_width(GTK_CONTAINER(vbox2), 8);
 
         /* Unicode -> Displayed blocks */
-        w = label_new_markup("<b>Enabled Unicode blocks</b>");
+        w = label_new_markup(_("<b>Enabled Unicode blocks</b>"));
         gtk_box_pack_start(GTK_BOX(vbox2), w, FALSE, FALSE, 0);
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(-1, 4), FALSE, FALSE, 0);
@@ -561,120 +561,120 @@ static void create_dialog(void)
 
         /* Recognition -> Duplicate glyphs */
         gtk_box_pack_start(GTK_BOX(vbox2), spacer_new(-1, 8), FALSE, FALSE, 0);
-        w = label_new_markup("<b>Language options</b>");
+        w = label_new_markup(_("<b>Language options</b>"));
         gtk_box_pack_start(GTK_BOX(vbox2), w, FALSE, FALSE, 0);
 
         /* Unicode -> Disable Latin letters */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = check_button_new("Disable Basic Latin letters",
+        w = check_button_new(_("Disable Basic Latin letters"),
                              &no_latin_alpha, TRUE);
         gtk_box_pack_start(GTK_BOX(hbox), w, TRUE, TRUE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
         gtk_tooltips_set_tip(tooltips, w,
-                             "If you have trained both the Basic Latin block "
+                             _("If you have trained both the Basic Latin block "
                              "and a block with characters similar to Latin "
                              "letters (for instance, Cyrillic) you can disable "
                              "the Basic Latin letters in order to use only "
-                             "numbers and symbols from Basic Latin.", NULL);
+                             "numbers and symbols from Basic Latin."), NULL);
 
         /* Unicode -> Right-to-left */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = check_button_new("Enable right-to-left mode",
+        w = check_button_new(_("Enable right-to-left mode"),
                              &right_to_left, TRUE);
         gtk_box_pack_start(GTK_BOX(hbox), w, TRUE, TRUE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
         gtk_tooltips_set_tip(tooltips, w,
-                             PACKAGE_NAME " will expect you to write from "
+                             _(PACKAGE_NAME " will expect you to write from "
                              "the rightmost cell to the left and will pad "
-                             "cells and create new lines accordingly.", NULL);
+                             "cells and create new lines accordingly."), NULL);
 
         /* Recognition page */
         vbox2 = gtk_vbox_new(FALSE, 0);
         gtk_container_set_border_width(GTK_CONTAINER(vbox2), 8);
-        w = gtk_label_new("Recognition");
+        w = gtk_label_new(_("Recognition"));
         gtk_notebook_append_page(GTK_NOTEBOOK(notebook), vbox2, w);
 
         /* Recognition -> Samples */
-        w = label_new_markup("<b>Training samples</b>");
+        w = label_new_markup(_("<b>Training samples</b>"));
         gtk_box_pack_start(GTK_BOX(vbox2), w, FALSE, FALSE, 0);
 
         /* Recognition -> Samples -> Train on input */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = check_button_new("Train on input when entering",
+        w = check_button_new(_("Train on input when entering"),
                              &train_on_input, FALSE);
         gtk_box_pack_start(GTK_BOX(hbox), w, TRUE, TRUE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
         gtk_tooltips_set_tip(tooltips, w,
-                             "When enabled, input characters will be used as "
+                             _("When enabled, input characters will be used as "
                              "training samples when 'Enter' is pressed. This "
                              "is a good way to quickly build up many samples, "
                              "but can generate poor samples if your writing "
-                             "gets sloppy.", NULL);
+                             "gets sloppy."), NULL);
 
         /* Recognition -> Samples -> Maximum */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = label_new_markup("Samples per character: ");
+        w = label_new_markup(_("Samples per character: "));
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
         w = spin_button_new_int(2, SAMPLES_MAX, &samples_max, FALSE);
         gtk_box_pack_start(GTK_BOX(hbox), w, FALSE, FALSE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
         gtk_tooltips_set_tip(tooltips, w,
-                             "The maximum number of training samples kept per "
+                             _("The maximum number of training samples kept per "
                              "character. Lower this value if recognition is "
-                             "too slow or the program uses too much memory.",
+                             "too slow or the program uses too much memory."),
                              NULL);
 
         /* Recognition -> Word context */
         gtk_box_pack_start(GTK_BOX(vbox2), spacer_new(-1, 8), FALSE, FALSE, 0);
-        w = label_new_markup("<b>Word context</b>");
+        w = label_new_markup(_("<b>Word context</b>"));
         gtk_box_pack_start(GTK_BOX(vbox2), w, FALSE, FALSE, 0);
 
         /* Recognition -> Word context -> English */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = check_button_new("Enable English word context",
+        w = check_button_new(_("Enable English word context"),
                              &wordfreq_enable, FALSE);
         gtk_box_pack_start(GTK_BOX(hbox), w, TRUE, TRUE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
         gtk_tooltips_set_tip(tooltips, w,
-                             "Use a dictionary of the most frequent English "
+                             _("Use a dictionary of the most frequent English "
                              "words to assist recognition. Also aids in "
                              "consistent recognition of numbers and "
-                             "capitalization.", NULL);
+                             "capitalization."), NULL);
 
         /* Recognition -> Preprocessor */
         gtk_box_pack_start(GTK_BOX(vbox2), spacer_new(-1, 8), FALSE, FALSE, 0);
-        w = label_new_markup("<b>Preprocessor</b>");
+        w = label_new_markup(_("<b>Preprocessor</b>"));
         gtk_box_pack_start(GTK_BOX(vbox2), w, FALSE, FALSE, 0);
 
         /* Recognition -> Preprocessor -> Ignore stroke direction */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = check_button_new("Ignore stroke direction",
+        w = check_button_new(_("Ignore stroke direction"),
                              &ignore_stroke_dir, FALSE);
         gtk_box_pack_start(GTK_BOX(hbox), w, TRUE, TRUE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
         gtk_tooltips_set_tip(tooltips, w,
-                             "Match input strokes with training sample strokes "
+                             _("Match input strokes with training sample strokes "
                              "that were drawn in the opposite direction. "
-                             "Disabling this can boost recognition speed.",
+                             "Disabling this can boost recognition speed."),
                              NULL);
 
         /* Recognition -> Preprocessor -> Ignore stroke number */
         hbox = gtk_hbox_new(FALSE, 0);
         gtk_box_pack_start(GTK_BOX(hbox), spacer_new(16, -1), FALSE, FALSE, 0);
-        w = check_button_new("Match differing stroke numbers",
+        w = check_button_new(_("Match differing stroke numbers"),
                              &ignore_stroke_num, FALSE);
         gtk_box_pack_start(GTK_BOX(hbox), w, TRUE, TRUE, 0);
         gtk_box_pack_start(GTK_BOX(vbox2), hbox, FALSE, FALSE, 0);
         gtk_tooltips_set_tip(tooltips, w,
-                             "Match inputs to training samples that do not "
+                             _("Match inputs to training samples that do not "
                              "have the same number of strokes. Disabling this "
-                             "can boost recognition speed.", NULL);
+                             "can boost recognition speed."), NULL);
 
         /* Create dialog window */
         options_dialog = gtk_window_new(GTK_WINDOW_TOPLEVEL);
@@ -682,7 +682,7 @@ static void create_dialog(void)
                          G_CALLBACK(gtk_widget_hide_on_delete), NULL);
         gtk_window_set_destroy_with_parent(GTK_WINDOW(options_dialog), TRUE);
         gtk_window_set_resizable(GTK_WINDOW(options_dialog), TRUE);
-        gtk_window_set_title(GTK_WINDOW(options_dialog), "CellWriter Setup");
+        gtk_window_set_title(GTK_WINDOW(options_dialog), _("CellWriter Setup"));
         gtk_container_set_border_width(GTK_CONTAINER(options_dialog), 8);
         gtk_container_add(GTK_CONTAINER(options_dialog), vbox);
         if (!window_embedded)
Index: cellwriter-1.3.4_20110312/src/statusicon.c
===================================================================
--- cellwriter-1.3.4_20110312.orig/src/statusicon.c
+++ cellwriter-1.3.4_20110312/src/statusicon.c
@@ -90,15 +90,15 @@ static void status_menu_popup(GObject *s
 
         /* Menu -> Show/Hide */
         if (GTK_WIDGET_VISIBLE(window))
-                status_menu_show = gtk_menu_item_new_with_label("Hide");
+                status_menu_show = gtk_menu_item_new_with_label(_("Hide"));
         else
-                status_menu_show = gtk_menu_item_new_with_label("Show");
+                status_menu_show = gtk_menu_item_new_with_label(_("Show"));
         g_signal_connect(G_OBJECT(status_menu_show), "activate",
                          G_CALLBACK(window_toggle), NULL);
         gtk_menu_attach(GTK_MENU(status_menu), status_menu_show, 0, 1, 0, 1);
 
         /* Menu -> Setup */
-        widget = gtk_image_menu_item_new_with_label("Setup");
+        widget = gtk_image_menu_item_new_with_label(_("Setup"));
         image = gtk_image_new();
         gtk_image_set_from_stock(GTK_IMAGE(image), GTK_STOCK_PREFERENCES,
                                  GTK_ICON_SIZE_MENU);
Index: cellwriter-1.3.4_20110312/po/LINGUAS
===================================================================
--- /dev/null
+++ cellwriter-1.3.4_20110312/po/LINGUAS
@@ -0,0 +1 @@
+tr
Index: cellwriter-1.3.4_20110312/src/common.h
===================================================================
--- cellwriter-1.3.4_20110312.orig/src/common.h
+++ cellwriter-1.3.4_20110312/src/common.h
@@ -22,6 +22,9 @@ Foundation, Inc., 51 Franklin Street, Fi
 
 #include <gtk/gtk.h>
 #include <math.h>
+#ifdef ENABLE_NLS
+#include <glib/gi18n.h>
+#endif
 
 /*
         Limits

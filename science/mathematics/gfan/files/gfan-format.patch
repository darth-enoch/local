--- ./genericwalk.cpp.orig	2011-01-25 08:33:16.000000000 -0700
+++ ./genericwalk.cpp	2011-04-27 13:42:52.227946066 -0600
@@ -202,7 +202,7 @@
     g=newG;
 
     nflips++;
-    fprintf(Stderr,"Flip %i, new size %i\n",nflips,g.size());
+    fprintf(Stderr,"Flip %i, new size %zu\n",nflips,g.size());
   }
   fprintf(Stderr,"Number of flips:%i\n",nflips);
 
--- ./app_isgroebnerbasis.cpp.orig	2011-01-25 08:33:15.000000000 -0700
+++ ./app_isgroebnerbasis.cpp	2011-04-27 13:48:16.474949962 -0600
@@ -47,7 +47,7 @@
     IntegerVectorListList sums;
     IntegerVectorList polytope=minkowski(polytopes,&sums);
 
-    fprintf(Stderr,"Number of extreme vertices in Minkowski sum: %i\n",polytope.size());
+    fprintf(Stderr,"Number of extreme vertices in Minkowski sum: %zu\n",polytope.size());
 
     bool isGroebnerBasis=false;
     int counter=0;
--- ./polyhedralfan.cpp.orig	2011-01-25 08:33:17.000000000 -0700
+++ ./polyhedralfan.cpp	2011-04-27 13:46:56.746866265 -0600
@@ -604,7 +604,7 @@
 {
   //  log0 fprintf(Stderr,"rayComplexSymmetry - begin\n");
   PolyhedralFan ret(n);
-  log1 fprintf(Stderr,"Computing rays of %i cones\n",cones.size());
+  log1 fprintf(Stderr,"Computing rays of %zu cones\n",cones.size());
   for(PolyhedralConeList::const_iterator i=cones.begin();i!=cones.end();i++)
     {
       {
@@ -812,7 +812,7 @@
         SymmetryGroup localsym(n);
         if(!sym)sym=&localsym;
   set<IntegerVector> rays;
-  log1 fprintf(Stderr,"Computing rays of %i cones\n",cones.size());
+  log1 fprintf(Stderr,"Computing rays of %zu cones\n",cones.size());
   for(PolyhedralConeList::const_iterator i=cones.begin();i!=cones.end();i++)
     {
       {
@@ -1212,7 +1212,7 @@
 	    static int t;
 	    if((t&1023)==0)
 	      {
-		fprintf(Stderr,"clist size:%i\n",clist.size());
+		fprintf(Stderr,"clist size:%zu\n",clist.size());
 	      }
 	    t++;
 	  }
--- ./bergman.cpp.orig	2011-01-25 08:33:16.000000000 -0700
+++ ./bergman.cpp	2011-04-27 13:45:37.266767581 -0600
@@ -149,7 +149,7 @@
       if(0)
 	{
 	  s=fullColoredIdeals(*g,false);
-	  fprintf(Stderr,"Full colored ideals computed, #=%i\n",s.size());
+	  fprintf(Stderr,"Full colored ideals computed, #=%zu\n",s.size());
 	}
       else
 	{
@@ -539,7 +539,7 @@
   while(!active.empty())
     {
       log1 fprintf(Stderr,"\n-------------------------------------\n");
-      log1 fprintf(Stderr,"Size of active set: %i, Completed: %i\n",active.size(),ret.cones.size());
+      log1 fprintf(Stderr,"Size of active set: %i, Completed: %zu\n",active.size(),ret.cones.size());
       log1 fprintf(Stderr,"-------------------------------------\n");
       AsciiPrinter p(Stderr);
       
--- ./symmetry.cpp.orig	2011-01-25 08:33:17.000000000 -0700
+++ ./symmetry.cpp	2011-04-27 13:43:45.571656038 -0600
@@ -300,7 +300,7 @@
       l.push_back(*i);
     }
   P.printVectorList(l);
-  fprintf(f,"Group order=%i\n",elements.size());
+  fprintf(f,"Group order=%zu\n",elements.size());
   P.printString("Done printing SymmetryGroup.\n");
 }
 
--- ./xfig.cpp.orig	2011-01-25 08:33:17.000000000 -0700
+++ ./xfig.cpp	2011-04-27 13:46:06.770948094 -0600
@@ -103,7 +103,7 @@
 {
   if(vertices.size())
     {
-      fprintf(f,"2 3 0 1 0 %i 50 0 25 0.000 0 0 -1 0 0 %i\n        ",7,vertices.size()+1);
+      fprintf(f,"2 3 0 1 0 %i 50 0 25 0.000 0 0 -1 0 0 %zu\n        ",7,vertices.size()+1);
       
       for(Polygon::const_iterator i=vertices.begin();i!=vertices.end();i++)
         kickPoint(*i,mode);
--- ./lp_cdd.cpp.orig	2011-01-25 08:33:16.000000000 -0700
+++ ./lp_cdd.cpp	2011-04-27 13:39:42.788631110 -0600
@@ -1287,8 +1287,8 @@
   if(A->rowsize!=newLin.size()+newIn.size())
     {
       fprintf(stderr,"A->rowsize: %i\n",(int)A->rowsize);
-      fprintf(stderr,"newLin.size(): %i\n",newLin.size());
-      fprintf(stderr,"newIn.size(): %i\n",newIn.size());
+      fprintf(stderr,"newLin.size(): %zu\n",newLin.size());
+      fprintf(stderr,"newIn.size(): %zu\n",newIn.size());
 
       dd_WriteMatrix(Stderr,A);
 
--- ./minkowskisum.cpp.orig	2011-01-25 08:33:16.000000000 -0700
+++ ./minkowskisum.cpp	2011-04-27 13:43:17.412392770 -0600
@@ -27,7 +27,7 @@
 
     assert(f);
     {
-      fprintf(f,"%i",polytopes.size());
+      fprintf(f,"%zu",polytopes.size());
       TopcomPrinter p(f);
       //AsciiPrinter p(f);
 
--- ./xfig.h.orig	2011-01-25 08:33:19.000000000 -0700
+++ ./xfig.h	2011-04-27 13:40:09.491983874 -0600
@@ -52,7 +52,7 @@
   void endDrawLine()
     {
       assert(p.size()>0);
-      fprintf(f," %i\n",p.size());
+      fprintf(f," %zu\n",p.size());
       if(arrowOrigin)
 	fprintf(f,"\t 2 1 1.00 60.00 120.00\n");
       if(arrowTarget)
--- ./gmpallocator.cpp.orig	2011-01-25 08:33:16.000000000 -0700
+++ ./gmpallocator.cpp	2011-04-27 13:44:36.363523526 -0600
@@ -145,19 +145,19 @@
 //Debug
 void *myAllocateFunctionD(size_t alloc_size)
 {
-  fprintf(stderr,"Allocating: %i bytes.\n",alloc_size);
+  fprintf(stderr,"Allocating: %zu bytes.\n",alloc_size);
   return malloc(alloc_size);
 }
 
 void *myReallocateFunctionD(void *ptr, size_t old_size, size_t new_size)
 {
-  fprintf(stderr,"Reallocating: %i --> %i bytes.\n",old_size,new_size);
+  fprintf(stderr,"Reallocating: %zu --> %zu bytes.\n",old_size,new_size);
   return realloc(ptr,new_size);
 }
 
 void myDeallocateFunctionD(void *ptr, size_t size)
 {
-  fprintf(stderr,"Freeing: %i bytes.\n",size);
+  fprintf(stderr,"Freeing: %zu bytes.\n",size);
   return free(ptr);
 }
 
--- ./app_test.cpp.orig	2011-01-25 08:33:15.000000000 -0700
+++ ./app_test.cpp	2011-04-27 13:49:04.826968542 -0600
@@ -128,7 +128,7 @@
 
 	M[I]=minusOne*M[I];
       }
-    fprintf(Stdout,"Extreme permutations (%i):\n",extreme.size());
+    fprintf(Stdout,"Extreme permutations (%zu):\n",extreme.size());
     P.printVectorList(extreme);
   }
 
--- ./buchberger.cpp.orig	2011-01-25 08:33:16.000000000 -0700
+++ ./buchberger.cpp	2011-04-27 13:41:04.116614389 -0600
@@ -540,7 +540,7 @@
 	{
 	  static int t;
 	  t++;
-	  if((t&31)==0)fprintf(Stderr,"         spolys:%i\n",sPolynomials.size());
+	  if((t&31)==0)fprintf(Stderr,"         spolys:%zu\n",sPolynomials.size());
 	}
 
       {
@@ -565,7 +565,7 @@
 	    {
 	      static int t;
 	      if(((++t)&=31)==0)
-		fprintf(Stderr,"gsize:%i spolys:%i\n",g->size()+1,sPolynomials.size());
+		fprintf(Stderr,"gsize:%zu spolys:%zu\n",g->size()+1,sPolynomials.size());
 	    }
 	  PolynomialSet::iterator j=g->end();j--;
 	  updatePairs(sPolynomials,g,&redundantOnes,j,indexj,truncationDegree,&grading);
--- ./halfopencone.cpp.orig	2011-01-25 08:33:16.000000000 -0700
+++ ./halfopencone.cpp	2011-04-27 13:47:51.531488017 -0600
@@ -555,14 +555,14 @@
     {
       HalfOpenConeList surface=tropicalHyperSurface(*i);
 
-      fprintf(Stderr,"Number of cones in current intersection:%i\n",intersection.size());
-      fprintf(Stderr,"Number of cones in next surface:%i\n",surface.size());
+      fprintf(Stderr,"Number of cones in current intersection:%zu\n",intersection.size());
+      fprintf(Stderr,"Number of cones in next surface:%zu\n",surface.size());
 
       fprintf(Stderr,"A\n");
       intersection=refinement(intersection,surface);
       fprintf(Stderr,"B\n");
     }
-  fprintf(Stderr,"%i",intersection.size());
+  fprintf(Stderr,"%zu",intersection.size());
 
   return intersection;
 }
--- ./app_normalfancleanup.cpp.orig	2011-01-25 08:33:15.000000000 -0700
+++ ./app_normalfancleanup.cpp	2011-04-27 13:51:05.227545050 -0600
@@ -71,7 +71,7 @@
 		  FILE *f=fopen("iteraTIon","w");
 		  if(f)
 		    {
-		      fprintf(f,"%i:%i\n",a,l2.size());
+		      fprintf(f,"%i:%zu\n",a,l2.size());
 		      fclose(f);
 		    }
 		}
--- ./app_secondaryfan.cpp.orig	2011-01-25 08:33:15.000000000 -0700
+++ ./app_secondaryfan.cpp	2011-04-27 13:50:21.635232740 -0600
@@ -142,7 +142,7 @@
 
     while(1)
       {
-	fprintf(stdout,"Triangles in current triangulation:%i\n",a.bases.size());
+	fprintf(stdout,"Triangles in current triangulation:%zu\n",a.bases.size());
 	PolyhedralCone C=a.secondaryCone();
 
 	C.canonicalize();
@@ -198,7 +198,7 @@
 
     while(1)
       {
-	fprintf(stdout,"Triangles in current triangulation:%i\n",a.bases.size());
+	fprintf(stdout,"Triangles in current triangulation:%zu\n",a.bases.size());
 	//	PolyhedralCone C=a.secondaryCone();
 
 	//	C.canonicalize();
@@ -214,7 +214,7 @@
 	      {
 		Triangulation2 b=a;
 		b.flipNew(-*i);
-		fprintf(stdout,"Triangles in new triangulation:%i\n",b.bases.size());
+		fprintf(stdout,"Triangles in new triangulation:%zu\n",b.bases.size());
 
 		if(b.bases.size()==abortAtSize)
 		  {
--- ./app_intsinpolytope.cpp.orig	2011-01-25 08:33:15.000000000 -0700
+++ ./app_intsinpolytope.cpp	2011-04-27 13:49:42.202664015 -0600
@@ -104,7 +104,7 @@
 	  }
       }
 
-    fprintf(stderr,"Sets to test: %i\n",setsToCheck.size());
+    fprintf(stderr,"Sets to test: %zu\n",setsToCheck.size());
 
     set<set<int> > ret;
     for(set<set<int> >::const_iterator i=setsToCheck.begin();i!=setsToCheck.end();i++)
@@ -118,7 +118,7 @@
 	if(isPartOfAZBasis(l))ret.insert(*i);
       }
 
-    fprintf(stderr,"Produced sets: %i\n",ret.size());
+    fprintf(stderr,"Produced sets: %zu\n",ret.size());
 
     return ret;
   }
--- ./app_tropicaltraverse.cpp.orig	2011-01-25 08:33:15.000000000 -0700
+++ ./app_tropicaltraverse.cpp	2011-04-27 13:48:41.939379788 -0600
@@ -156,7 +156,7 @@
 	BergmanFan f=bergman(coneGroebnerBasis,idealGroebnerBasis,&s);
 	f.computeMultiplicities();
 	/*	log1 fprintf(Stderr,"Is simplicial: %s\n",f.isSimplicial()?"true":"false");*/
-	log1 fprintf(Stderr,"Order of input symmetry group: %i\n",s.elements.size());
+	log1 fprintf(Stderr,"Order of input symmetry group: %zu\n",s.elements.size());
 	log1 fprintf(Stderr,"Number of maximal cones: %i\n",f.numberOfMaximalCones());
 	log1 fprintf(Stderr,"Modulo the homogeneity space:\n");
 	log1 AsciiPrinter(Stderr).printVectorList(hv);
